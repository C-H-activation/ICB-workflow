import logging
from pathlib import Path
from typing import Callable, Optional

from kallisto.atom import Atom
from kallisto.molecule import Molecule
from kallisto.units import Bohr

# define transition state (TS) templates for Iridium catalyzed borylation catalysts
# Given are TS structures that describe the oxidative addition of one benzene C-H
# bond with Iridium (activation step). Template structures have been obtained by
# B3LYP-D3(BJ)/LACVP** in tetrahydrofuran applied in a Poisson-Boltzmann solvation
# scheme. All templates have different B-Ir-C-H dihedral (dB-Ir-C-H) angles and will
# be fixed in upcoming optimization steps using the GFN2-xtb software.

LOG = logging.getLogger(__name__)
LOG.addHandler(logging.NullHandler())


def write_transition_state(n: int, name: str, path: Optional[Path] = None) -> None:
    """Write out transition-state structure depending on input."""
    mol = get_transition_state(n)
    mol.writeMolecule(name=name, path=path if path else Path.cwd())


def get_transition_state(n: int) -> Molecule:
    """Return transition-state structure depending on input."""

    switcher = {
        1: lambda: ts1(),
        2: lambda: ts2(),
        3: lambda: ts3(),
        4: lambda: ts4(),
        5: lambda: ts5(),
        6: lambda: ts6(),
        7: lambda: ts7(),
        8: lambda: ts8(),
        9: lambda: ts9(),
        19: lambda: ts19(),
        20: lambda: ts20(),
        21: lambda: ts21(),
        22: lambda: ts22(),
        23: lambda: ts23(),
        24: lambda: ts24(),
        25: lambda: ts25(),
        26: lambda: ts26(),
        27: lambda: ts27(),
    }
    func: Callable[[], Molecule] = switcher.get(
        n, lambda: "Invalid transition-state structure requested."
    )
    return func()


def ts1() -> Molecule:
    """Create template with d(B(72)-Ir(19)-C(24)-H(27)) = 320 degrees.
    Values in parentheses are indices in xmol file."""

    coords = [
        [-0.96510, -2.11530, -0.24090],
        [-2.24700, -1.69840, -0.36220],
        [-3.14040, -2.36820, -1.21200],
        [-2.70220, -3.47560, -1.93050],
        [-1.37780, -3.89880, -1.78760],
        [-0.54290, -3.18670, -0.93510],
        [0.49810, -3.45630, -0.78940],
        [-0.99570, -4.76030, -2.32770],
        [-4.16500, -2.02890, -1.31830],
        [-2.62130, -0.50950, 0.44100],
        [-1.62600, 0.07330, 1.16020],
        [-1.89680, 1.15240, 1.91690],
        [-3.17230, 1.70330, 1.99650],
        [-4.20510, 1.11740, 1.26270],
        [-3.92610, 0.00250, 0.47820],
        [-4.71960, -0.46420, -0.09520],
        [-3.34630, 2.57510, 2.62070],
        [-1.04450, 1.57420, 2.43690],
        [0.42150, -0.81650, 0.91330],
        [1.04380, -1.95820, 5.24990],
        [-0.23880, -2.30790, 5.68240],
        [-1.27780, -2.37490, 4.75000],
        [-1.03730, -2.08210, 3.40400],
        [0.23590, -1.68140, 2.96030],
        [1.27920, -1.66240, 3.90500],
        [2.27790, -1.38910, 3.57780],
        [0.87260, -2.23030, 1.54050],
        [-1.85880, -2.14750, 2.69470],
        [-0.42380, -2.53880, 6.72930],
        [0.50670, 0.41560, -0.81540],
        [0.19500, -0.04700, -2.09150],
        [0.00650, 1.10040, -2.95430],
        [0.49020, 0.74740, -4.35780],
        [1.51610, 0.37380, -4.33700],
        [0.44730, 1.62240, -5.01670],
        [-0.14740, -0.03390, -4.78430],
        [-1.50120, 1.39560, -2.96670],
        [-1.75370, 2.21460, -3.64850],
        [-2.03200, 0.49450, -3.28930],
        [-1.85170, 1.65210, -1.96220],
        [0.84230, 2.20670, -2.22040],
        [0.75200, 1.78260, -0.83690],
        [2.32930, 2.18620, -2.59900],
        [2.74130, 1.18500, -2.45750],
        [2.48870, 2.51300, -3.63180],
        [2.87200, 2.86270, -1.93200],
        [0.28440, 3.62290, -2.33660],
        [-0.72650, 3.69040, -1.92910],
        [0.92130, 4.31480, -1.77610],
        [0.26430, 3.94810, -3.38320],
        [1.56300, 0.60960, 1.84840],
        [2.92780, 0.55230, 2.15020],
        [3.36330, 1.88660, 2.50260],
        [4.53140, 1.78590, 3.47740],
        [4.27910, 1.16090, 4.33690],
        [5.39390, 1.33790, 2.97340],
        [4.82390, 2.77870, 3.83820],
        [3.79700, 2.56850, 1.19670],
        [4.20020, 3.57090, 1.37680],
        [4.56740, 1.95560, 0.72110],
        [2.95240, 2.63260, 0.50540],
        [2.05040, 2.50090, 3.09320],
        [1.03750, 1.81620, 2.31910],
        [1.89100, 4.00450, 2.88650],
        [1.87290, 4.25440, 1.82410],
        [0.94940, 4.34260, 3.33170],
        [2.71080, 4.55150, 3.36630],
        [1.82470, 2.13200, 4.56520],
        [1.92610, 1.05330, 4.71320],
        [2.52610, 2.65280, 5.22540],
        [0.80630, 2.41580, 4.84900],
        [2.27820, -1.33090, 0.17410],
        [2.89460, -2.57740, 0.38450],
        [4.26930, -2.48200, -0.07210],
        [5.10900, -2.05380, 1.14010],
        [4.76350, -1.08740, 1.51750],
        [4.98050, -2.79470, 1.93590],
        [6.17420, -1.99290, 0.89300],
        [4.71950, -3.84660, -0.58470],
        [4.75280, -4.56130, 0.24420],
        [5.72330, -3.78370, -1.02010],
        [4.03500, -4.23600, -1.34170],
        [4.16440, -1.36220, -1.16300],
        [3.08520, -0.55030, -0.65400],
        [5.40720, -0.48870, -1.31550],
        [6.27320, -1.09010, -1.61530],
        [5.23300, 0.26930, -2.08590],
        [5.64270, 0.02650, -0.38240],
        [3.71800, -1.89830, -2.53110],
        [2.82530, -2.52160, -2.42740],
        [3.46090, -1.05250, -3.17550],
        [4.50570, -2.48290, -3.01790],
        [1.86680, -1.91890, 5.96150],
        [-2.27860, -2.66160, 5.06990],
        [-3.38500, -4.00130, -2.59310],
        [-5.21400, 1.52080, 1.29960],
    ]
    coords = [[float(j) / Bohr for j in i] for i in coords]

    symbols = [
        "N",
        "C",
        "C",
        "C",
        "C",
        "C",
        "H",
        "H",
        "H",
        "C",
        "N",
        "C",
        "C",
        "C",
        "C",
        "H",
        "H",
        "H",
        "Ir",
        "C",
        "C",
        "C",
        "C",
        "C",
        "C",
        "H",
        "H",
        "H",
        "H",
        "B",
        "O",
        "C",
        "C",
        "H",
        "H",
        "H",
        "C",
        "H",
        "H",
        "H",
        "C",
        "O",
        "C",
        "H",
        "H",
        "H",
        "C",
        "H",
        "H",
        "H",
        "B",
        "O",
        "C",
        "C",
        "H",
        "H",
        "H",
        "C",
        "H",
        "H",
        "H",
        "C",
        "O",
        "C",
        "H",
        "H",
        "H",
        "C",
        "H",
        "H",
        "H",
        "B",
        "O",
        "C",
        "C",
        "H",
        "H",
        "H",
        "C",
        "H",
        "H",
        "H",
        "C",
        "O",
        "C",
        "H",
        "H",
        "H",
        "C",
        "H",
        "H",
        "H",
        "H",
        "H",
        "H",
        "H",
    ]

    atoms = []
    for i, _ in enumerate(coords):
        atoms.append(Atom(symbols[i], position=coords[i]))
    return Molecule(symbols=atoms)


def ts2() -> Molecule:
    """Create template with d(B(72)-Ir(19)-C(24)-H(27)) = 330 degrees.
    Values in parentheses are indices in xmol file."""

    coords = [
        [-1.18910, -1.87300, -0.11030],
        [-2.39650, -1.26380, -0.15140],
        [-3.43460, -1.78310, -0.93910],
        [-3.21670, -2.94000, -1.68080],
        [-1.96610, -3.56040, -1.62290],
        [-0.97900, -2.98990, -0.82720],
        [0.01840, -3.41150, -0.75170],
        [-1.75490, -4.46470, -2.18670],
        [-4.39940, -1.28940, -0.98360],
        [-2.52960, -0.03020, 0.66250],
        [-1.40820, 0.40550, 1.29480],
        [-1.45390, 1.52640, 2.03710],
        [-2.62410, 2.26260, 2.19710],
        [-3.78700, 1.82420, 1.56190],
        [-3.73780, 0.66960, 0.78660],
        [-4.63380, 0.31720, 0.28770],
        [-2.61780, 3.16060, 2.80820],
        [-0.51040, 1.82220, 2.48160],
        [0.44710, -0.79790, 0.95340],
        [0.84890, -2.09800, 5.27560],
        [-0.46420, -2.40300, 5.64630],
        [-1.46850, -2.38660, 4.67420],
        [-1.16130, -2.05760, 3.35040],
        [0.14540, -1.70690, 2.96720],
        [1.14960, -1.76710, 3.95180],
        [2.17390, -1.53950, 3.67120],
        [0.81750, -2.24420, 1.55930],
        [-1.95740, -2.05550, 2.60950],
        [-0.69990, -2.66270, 6.67620],
        [0.59490, 0.43880, -0.76190],
        [0.15410, 0.04750, -2.02410],
        [0.03100, 1.23320, -2.84610],
        [0.37930, 0.87380, -4.28760],
        [1.35940, 0.39650, -4.34840],
        [0.38260, 1.76720, -4.92270],
        [-0.36360, 0.17420, -4.68440],
        [-1.43480, 1.68290, -2.74720],
        [-1.64470, 2.54340, -3.39130],
        [-2.07730, 0.85120, -3.05250],
        [-1.68960, 1.94430, -1.71550],
        [1.02580, 2.22480, -2.14650],
        [0.98480, 1.77130, -0.77050],
        [2.47430, 2.06270, -2.62590],
        [2.78850, 1.02140, -2.53130],
        [2.59930, 2.39670, -3.66110],
        [3.12670, 2.66360, -1.98520],
        [0.61320, 3.69380, -2.19190],
        [-0.35510, 3.85270, -1.71260],
        [1.35530, 4.29980, -1.66230],
        [0.55620, 4.05020, -3.22710],
        [1.85550, 0.40070, 1.82960],
        [3.20550, 0.10380, 2.05910],
        [3.88530, 1.34480, 2.36210],
        [5.07840, 1.05030, 3.26460],
        [4.77890, 0.48240, 4.14830],
        [5.81830, 0.45890, 2.71550],
        [5.55830, 1.98030, 3.59070],
        [4.34780, 1.93330, 1.02080],
        [4.92310, 2.85500, 1.15950],
        [4.97430, 1.19610, 0.51220],
        [3.48690, 2.13350, 0.37720],
        [2.73770, 2.18150, 3.02200],
        [1.57590, 1.67880, 2.32310],
        [2.82610, 3.68910, 2.80040],
        [2.77930, 3.93180, 1.73720],
        [1.98840, 4.18710, 3.29980],
        [3.75800, 4.08940, 3.21610],
        [2.54540, 1.86860, 4.51170],
        [2.46740, 0.79030, 4.67340],
        [3.36730, 2.26340, 5.11810],
        [1.61180, 2.32770, 4.85190],
        [2.13000, -1.55390, 0.01840],
        [2.51160, -2.90720, 0.06130],
        [3.84340, -3.01460, -0.50700],
        [4.83280, -2.86130, 0.65750],
        [4.70360, -1.88720, 1.13840],
        [4.62530, -3.63810, 1.40060],
        [5.87030, -2.97050, 0.32430],
        [3.99390, -4.38050, -1.16910],
        [3.95680, -5.16780, -0.40920],
        [4.95640, -4.45380, -1.68810],
        [3.19420, -4.56570, -1.88990],
        [3.86960, -1.79260, -1.48510],
        [3.01140, -0.85120, -0.80420],
        [5.24030, -1.15230, -1.68790],
        [5.94330, -1.86780, -2.12970],
        [5.15050, -0.29740, -2.36580],
        [5.65300, -0.79220, -0.74380],
        [3.22040, -2.10130, -2.84180],
        [2.23140, -2.54650, -2.70320],
        [3.09000, -1.16720, -3.39480],
        [3.83700, -2.77820, -3.44210],
        [1.64400, -2.12190, 6.01900],
        [-2.49350, -2.63450, 4.94630],
        [-4.01210, -3.35020, -2.29780],
        [-4.72000, 2.37260, 1.66580],
    ]
    coords = [[float(j) / Bohr for j in i] for i in coords]

    symbols = [
        "N",
        "C",
        "C",
        "C",
        "C",
        "C",
        "H",
        "H",
        "H",
        "C",
        "N",
        "C",
        "C",
        "C",
        "C",
        "H",
        "H",
        "H",
        "Ir",
        "C",
        "C",
        "C",
        "C",
        "C",
        "C",
        "H",
        "H",
        "H",
        "H",
        "B",
        "O",
        "C",
        "C",
        "H",
        "H",
        "H",
        "C",
        "H",
        "H",
        "H",
        "C",
        "O",
        "C",
        "H",
        "H",
        "H",
        "C",
        "H",
        "H",
        "H",
        "B",
        "O",
        "C",
        "C",
        "H",
        "H",
        "H",
        "C",
        "H",
        "H",
        "H",
        "C",
        "O",
        "C",
        "H",
        "H",
        "H",
        "C",
        "H",
        "H",
        "H",
        "B",
        "O",
        "C",
        "C",
        "H",
        "H",
        "H",
        "C",
        "H",
        "H",
        "H",
        "C",
        "O",
        "C",
        "H",
        "H",
        "H",
        "C",
        "H",
        "H",
        "H",
        "H",
        "H",
        "H",
        "H",
    ]

    atoms = []
    for i, _ in enumerate(coords):
        atoms.append(Atom(symbols[i], position=coords[i]))
    return Molecule(symbols=atoms)


def ts3() -> Molecule:
    """Create template with d(B(72)-Ir(19)-C(24)-H(27)) = 340 degrees.
    Values in parentheses are indices in xmol file."""

    coords = [
        [-1.36020, -1.62910, 0.00650],
        [-2.46690, -0.85160, 0.04250],
        [-3.61290, -1.20000, -0.68700],
        [-3.60890, -2.36240, -1.45150],
        [-2.46110, -3.15820, -1.47290],
        [-1.35710, -2.75210, -0.73120],
        [-0.42760, -3.31280, -0.72170],
        [-2.41690, -4.07220, -2.05820],
        [-4.49570, -0.57040, -0.67090],
        [-2.37280, 0.37800, 0.86800],
        [-1.16170, 0.65130, 1.41990],
        [-0.99350, 1.77290, 2.14420],
        [-2.03320, 2.66900, 2.37140],
        [-3.28940, 2.39440, 1.82820],
        [-3.45860, 1.24100, 1.06860],
        [-4.42820, 1.01770, 0.63770],
        [-1.85620, 3.56300, 2.96240],
        [0.01200, 1.93280, 2.51750],
        [0.46450, -0.80080, 0.98590],
        [0.74420, -2.16350, 5.30200],
        [-0.58870, -2.38170, 5.66300],
        [-1.57980, -2.29120, 4.68110],
        [-1.24060, -1.97550, 3.36140],
        [0.08970, -1.71220, 2.98630],
        [1.07650, -1.84420, 3.98210],
        [2.11740, -1.68940, 3.71200],
        [0.77430, -2.26220, 1.58940],
        [-2.03090, -1.91230, 2.61730],
        [-0.84990, -2.63050, 6.68910],
        [0.69250, 0.45970, -0.70680],
        [0.09310, 0.20620, -1.93840],
        [0.09810, 1.43590, -2.70420],
        [0.26890, 1.09880, -4.18240],
        [1.15230, 0.47870, -4.34630],
        [0.36360, 2.01150, -4.78200],
        [-0.60540, 0.54450, -4.53880],
        [-1.26400, 2.10500, -2.46470],
        [-1.38170, 3.01860, -3.05700],
        [-2.05370, 1.40100, -2.74480],
        [-1.39300, 2.35210, -1.40650],
        [1.29080, 2.22540, -2.05820],
        [1.29350, 1.71160, -0.70350],
        [2.65210, 1.87340, -2.67190],
        [2.81010, 0.79370, -2.64400],
        [2.74010, 2.23570, -3.70140],
        [3.44040, 2.33760, -2.07170],
        [1.10960, 3.74060, -2.00700],
        [0.22180, 4.01850, -1.43530],
        [1.97870, 4.19840, -1.52390],
        [1.02180, 4.15590, -3.01770],
        [2.08560, 0.15680, 1.78050],
        [3.38220, -0.35590, 1.92480],
        [4.27330, 0.75980, 2.16020],
        [5.46010, 0.28240, 2.99000],
        [5.13200, -0.22150, 3.90210],
        [6.05610, -0.42660, 2.40620],
        [6.10470, 1.12460, 3.26660],
        [4.73620, 1.25470, 0.78130],
        [5.46110, 2.07150, 0.86670],
        [5.20010, 0.42120, 0.24790],
        [3.87920, 1.58680, 0.18950],
        [3.32600, 1.78090, 2.87730],
        [2.04830, 1.46180, 2.28090],
        [3.63670, 3.25030, 2.60350],
        [3.54380, 3.47670, 1.53980],
        [2.93150, 3.88650, 3.14880],
        [4.65070, 3.50260, 2.93450],
        [3.20400, 1.53160, 4.38600],
        [2.97170, 0.48250, 4.58690],
        [4.12230, 1.80190, 4.91770],
        [2.38300, 2.13890, 4.77960],
        [1.92160, -1.76840, -0.12630],
        [2.05580, -3.16660, -0.19470],
        [3.29760, -3.46420, -0.88720],
        [4.38660, -3.57160, 0.19010],
        [4.47590, -2.62660, 0.73450],
        [4.10090, -4.35070, 0.90400],
        [5.35780, -3.83690, -0.24080],
        [3.14570, -4.78300, -1.63810],
        [3.02770, -5.60550, -0.92520],
        [4.03470, -4.98480, -2.24650],
        [2.27110, -4.77180, -2.29240],
        [3.46770, -2.19780, -1.79080],
        [2.85230, -1.17280, -0.97900],
        [4.91150, -1.79590, -2.08180],
        [5.43380, -2.58940, -2.62840],
        [4.92510, -0.89050, -2.69710],
        [5.45820, -1.58550, -1.16100],
        [2.66750, -2.28830, -3.09790],
        [1.62610, -2.55280, -2.89590],
        [2.67320, -1.31160, -3.58880],
        [3.09810, -3.02350, -3.78520],
        [1.53120, -2.24480, 6.04990],
        [-2.62210, -2.46870, 4.94200],
        [-4.48880, -2.64090, -2.02570],
        [-4.12600, 3.06970, 1.98890],
    ]
    coords = [[float(j) / Bohr for j in i] for i in coords]

    symbols = [
        "N",
        "C",
        "C",
        "C",
        "C",
        "C",
        "H",
        "H",
        "H",
        "C",
        "N",
        "C",
        "C",
        "C",
        "C",
        "H",
        "H",
        "H",
        "Ir",
        "C",
        "C",
        "C",
        "C",
        "C",
        "C",
        "H",
        "H",
        "H",
        "H",
        "B",
        "O",
        "C",
        "C",
        "H",
        "H",
        "H",
        "C",
        "H",
        "H",
        "H",
        "C",
        "O",
        "C",
        "H",
        "H",
        "H",
        "C",
        "H",
        "H",
        "H",
        "B",
        "O",
        "C",
        "C",
        "H",
        "H",
        "H",
        "C",
        "H",
        "H",
        "H",
        "C",
        "O",
        "C",
        "H",
        "H",
        "H",
        "C",
        "H",
        "H",
        "H",
        "B",
        "O",
        "C",
        "C",
        "H",
        "H",
        "H",
        "C",
        "H",
        "H",
        "H",
        "C",
        "O",
        "C",
        "H",
        "H",
        "H",
        "C",
        "H",
        "H",
        "H",
        "H",
        "H",
        "H",
        "H",
    ]

    atoms = []
    for i, _ in enumerate(coords):
        atoms.append(Atom(symbols[i], position=coords[i]))
    return Molecule(symbols=atoms)


def ts4() -> Molecule:
    """Create template with d(B(72)-Ir(19)-C(24)-H(27)) = 350 degrees.
    Values in parentheses are indices in xmol file."""

    coords = [
        [-1.54740, -1.22130, 0.13330],
        [-2.49690, -0.27580, 0.32420],
        [-3.72700, -0.34030, -0.34650],
        [-3.97590, -1.40550, -1.20830],
        [-2.99110, -2.37940, -1.38770],
        [-1.78770, -2.24280, -0.70220],
        [-0.97360, -2.95150, -0.81770],
        [-3.14510, -3.22470, -2.05250],
        [-4.47690, 0.43120, -0.21050],
        [-2.13820, 0.82550, 1.25130],
        [-0.84560, 0.87740, 1.66450],
        [-0.44520, 1.87230, 2.47630],
        [-1.32030, 2.85300, 2.93400],
        [-2.65670, 2.80230, 2.53590],
        [-3.06750, 1.78090, 1.68410],
        [-4.10380, 1.72400, 1.36920],
        [-0.95530, 3.63690, 3.59140],
        [0.60890, 1.86520, 2.72800],
        [0.48790, -0.77000, 0.98860],
        [0.73670, -2.33900, 5.23330],
        [-0.59810, -2.55820, 5.58560],
        [-1.59210, -2.40000, 4.61560],
        [-1.25380, -2.01590, 3.31450],
        [0.07880, -1.75290, 2.94800],
        [1.06700, -1.95310, 3.93160],
        [2.10990, -1.81160, 3.66300],
        [0.74140, -2.26720, 1.52710],
        [-2.04540, -1.90300, 2.57880],
        [-0.85910, -2.86060, 6.59770],
        [0.75230, 0.46430, -0.71410],
        [0.11130, 0.22870, -1.93050],
        [0.18550, 1.43990, -2.72000],
        [0.29580, 1.06750, -4.19540],
        [1.13200, 0.38880, -4.37040],
        [0.43350, 1.96220, -4.81340],
        [-0.62160, 0.56520, -4.51920],
        [-1.12050, 2.20690, -2.46180],
        [-1.19090, 3.11490, -3.07010],
        [-1.96370, 1.55330, -2.70610],
        [-1.20330, 2.48240, -1.40590],
        [1.44620, 2.15140, -2.11430],
        [1.43880, 1.66790, -0.74870],
        [2.76610, 1.68170, -2.74050],
        [2.84150, 0.59360, -2.68790],
        [2.86530, 2.01080, -3.78010],
        [3.59650, 2.09930, -2.16280],
        [1.37970, 3.67640, -2.09780],
        [0.52570, 4.03350, -1.51870],
        [2.28900, 4.07940, -1.64080],
        [1.30380, 4.07210, -3.11740],
        [2.28610, -0.09580, 1.65730],
        [3.47900, -0.82650, 1.76540],
        [4.56170, 0.11940, 1.93300],
        [5.68050, -0.53950, 2.73290],
        [5.30900, -0.95230, 3.67360],
        [6.11700, -1.35790, 2.15130],
        [6.47460, 0.18220, 2.95630],
        [5.04970, 0.49060, 0.52460],
        [5.90930, 1.16860, 0.55990],
        [5.33910, -0.42390, 0.00110],
        [4.24330, 0.95510, -0.04850],
        [3.84080, 1.31050, 2.65190],
        [2.50370, 1.20850, 2.11430],
        [4.39380, 2.69540, 2.32230],
        [4.29830, 2.91060, 1.25660],
        [3.83360, 3.45900, 2.87210],
        [5.44910, 2.77250, 2.60910],
        [3.74120, 1.12540, 4.17210],
        [3.33930, 0.13890, 4.41750],
        [4.71430, 1.24400, 4.66010],
        [3.05760, 1.87850, 4.57680],
        [1.65420, -1.92290, -0.28750],
        [1.47430, -3.30670, -0.46150],
        [2.63370, -3.81790, -1.17180],
        [3.66020, -4.22020, -0.10180],
        [3.95550, -3.34790, 0.48940],
        [3.20110, -4.95060, 0.57200],
        [4.55230, -4.67320, -0.54700],
        [2.21760, -5.02600, -2.00380],
        [1.92080, -5.84770, -1.34390],
        [3.05210, -5.37200, -2.62430],
        [1.37300, -4.79010, -2.65500],
        [3.08260, -2.56200, -1.99030],
        [2.68930, -1.48260, -1.11110],
        [4.58320, -2.46030, -2.25200],
        [4.92980, -3.30410, -2.85970],
        [4.79900, -1.53510, -2.79580],
        [5.15080, -2.44340, -1.32000],
        [2.30330, -2.39770, -3.30240],
        [1.22620, -2.41770, -3.11780],
        [2.54830, -1.42850, -3.74420],
        [2.56220, -3.17880, -4.02450],
        [1.52490, -2.47420, 5.97250],
        [-2.63530, -2.57970, 4.87210],
        [-4.92370, -1.47080, -1.73670],
        [-3.37050, 3.54610, 2.88110],
    ]
    coords = [[float(j) / Bohr for j in i] for i in coords]

    symbols = [
        "N",
        "C",
        "C",
        "C",
        "C",
        "C",
        "H",
        "H",
        "H",
        "C",
        "N",
        "C",
        "C",
        "C",
        "C",
        "H",
        "H",
        "H",
        "Ir",
        "C",
        "C",
        "C",
        "C",
        "C",
        "C",
        "H",
        "H",
        "H",
        "H",
        "B",
        "O",
        "C",
        "C",
        "H",
        "H",
        "H",
        "C",
        "H",
        "H",
        "H",
        "C",
        "O",
        "C",
        "H",
        "H",
        "H",
        "C",
        "H",
        "H",
        "H",
        "B",
        "O",
        "C",
        "C",
        "H",
        "H",
        "H",
        "C",
        "H",
        "H",
        "H",
        "C",
        "O",
        "C",
        "H",
        "H",
        "H",
        "C",
        "H",
        "H",
        "H",
        "B",
        "O",
        "C",
        "C",
        "H",
        "H",
        "H",
        "C",
        "H",
        "H",
        "H",
        "C",
        "O",
        "C",
        "H",
        "H",
        "H",
        "C",
        "H",
        "H",
        "H",
        "H",
        "H",
        "H",
        "H",
    ]

    atoms = []
    for i, _ in enumerate(coords):
        atoms.append(Atom(symbols[i], position=coords[i]))
    return Molecule(symbols=atoms)


def ts5() -> Molecule:
    """Create template with d(B(72)-Ir(19)-C(24)-H(27)) = 360 degrees.
    Values in parentheses are indices in xmol file."""

    coords = [
        [-1.60480, -1.04520, 0.24740],
        [-2.42530, 0.01540, 0.42900],
        [-3.70780, 0.03840, -0.13650],
        [-4.14320, -1.05000, -0.88660],
        [-3.29070, -2.14290, -1.05560],
        [-2.02810, -2.09760, -0.47220],
        [-1.31370, -2.90790, -0.57750],
        [-3.59320, -3.01330, -1.63070],
        [-4.35990, 0.89440, -0.00290],
        [-1.87960, 1.13170, 1.24050],
        [-0.58490, 1.02240, 1.63500],
        [-0.01280, 2.01780, 2.33610],
        [-0.71150, 3.16460, 2.70090],
        [-2.04960, 3.28410, 2.32290],
        [-2.63550, 2.26000, 1.58510],
        [-3.67360, 2.34190, 1.28320],
        [-0.21050, 3.94350, 3.26860],
        [1.03480, 1.87020, 2.57620],
        [0.49980, -0.80800, 1.00810],
        [0.63610, -2.31010, 5.27760],
        [-0.70900, -2.43800, 5.63450],
        [-1.69170, -2.23860, 4.66120],
        [-1.33350, -1.90490, 3.35130],
        [0.01280, -1.73540, 2.97670],
        [0.98620, -1.97270, 3.96770],
        [2.03650, -1.90400, 3.69700],
        [0.69630, -2.29950, 1.58490],
        [-2.11960, -1.75620, 2.61680],
        [-0.98710, -2.70090, 6.65280],
        [0.90800, 0.46390, -0.64200],
        [0.03390, 0.62700, -1.71480],
        [0.37470, 1.86360, -2.38920],
        [0.10190, 1.70390, -3.88140],
        [0.61550, 0.82840, -4.28410],
        [0.43130, 2.59090, -4.43460],
        [-0.97230, 1.57500, -4.04890],
        [-0.53180, 2.95120, -1.79290],
        [-0.39230, 3.91700, -2.28980],
        [-1.57500, 2.64330, -1.91230],
        [-0.33690, 3.07490, -0.72340],
        [1.88430, 2.04780, -2.00250],
        [1.94610, 1.38320, -0.71870],
        [2.84430, 1.30530, -2.94100],
        [2.55990, 0.25450, -3.01690],
        [2.86760, 1.75660, -3.93820],
        [3.85260, 1.34340, -2.51800],
        [2.33410, 3.49640, -1.82450],
        [1.76420, 3.99790, -1.03960],
        [3.39100, 3.52060, -1.54000],
        [2.21830, 4.05790, -2.75880],
        [2.40400, -0.38910, 1.59420],
        [3.49760, -1.26620, 1.54520],
        [4.70280, -0.47290, 1.64470],
        [5.79770, -1.30940, 2.29990],
        [5.46840, -1.72070, 3.25690],
        [6.06370, -2.14550, 1.64500],
        [6.69830, -0.70780, 2.46820],
        [5.09860, -0.09240, 0.21020],
        [6.03840, 0.46970, 0.18520],
        [5.21630, -1.00940, -0.37400],
        [4.30580, 0.49640, -0.25740],
        [4.21420, 0.75970, 2.48410],
        [2.82000, 0.83930, 2.11360],
        [4.88530, 2.08510, 2.12880],
        [4.68590, 2.35370, 1.08990],
        [4.49170, 2.88350, 2.76690],
        [5.96920, 2.02770, 2.28240],
        [4.27480, 0.52180, 3.99830],
        [3.79400, -0.42370, 4.26400],
        [5.30670, 0.50840, 4.36480],
        [3.73670, 1.32850, 4.50570],
        [1.37590, -2.08500, -0.36870],
        [1.03810, -3.44450, -0.49270],
        [2.00050, -4.06120, -1.39050],
        [3.14980, -4.57840, -0.51340],
        [3.62340, -3.74940, 0.02130],
        [2.74350, -5.27420, 0.22740],
        [3.90490, -5.10510, -1.10620],
        [1.32510, -5.20940, -2.13250],
        [1.06090, -6.00340, -1.42640],
        [2.00090, -5.63290, -2.88410],
        [0.41100, -4.88010, -2.63180],
        [2.42440, -2.84650, -2.28060],
        [2.30670, -1.74660, -1.34900],
        [3.85580, -2.89120, -2.80840],
        [4.00720, -3.76660, -3.45030],
        [4.05720, -1.99290, -3.40060],
        [4.57870, -2.92430, -1.99100],
        [1.43870, -2.58150, -3.42760],
        [0.41310, -2.53430, -3.05100],
        [1.67120, -1.61600, -3.88480],
        [1.50030, -3.35460, -4.20010],
        [1.41620, -2.47810, 6.01850],
        [-2.74360, -2.34410, 4.92240],
        [-5.13440, -1.04330, -1.33280],
        [-2.62940, 4.16280, 2.59370],
    ]
    coords = [[float(j) / Bohr for j in i] for i in coords]

    symbols = [
        "N",
        "C",
        "C",
        "C",
        "C",
        "C",
        "H",
        "H",
        "H",
        "C",
        "N",
        "C",
        "C",
        "C",
        "C",
        "H",
        "H",
        "H",
        "Ir",
        "C",
        "C",
        "C",
        "C",
        "C",
        "C",
        "H",
        "H",
        "H",
        "H",
        "B",
        "O",
        "C",
        "C",
        "H",
        "H",
        "H",
        "C",
        "H",
        "H",
        "H",
        "C",
        "O",
        "C",
        "H",
        "H",
        "H",
        "C",
        "H",
        "H",
        "H",
        "B",
        "O",
        "C",
        "C",
        "H",
        "H",
        "H",
        "C",
        "H",
        "H",
        "H",
        "C",
        "O",
        "C",
        "H",
        "H",
        "H",
        "C",
        "H",
        "H",
        "H",
        "B",
        "O",
        "C",
        "C",
        "H",
        "H",
        "H",
        "C",
        "H",
        "H",
        "H",
        "C",
        "O",
        "C",
        "H",
        "H",
        "H",
        "C",
        "H",
        "H",
        "H",
        "H",
        "H",
        "H",
        "H",
    ]

    atoms = []
    for i, _ in enumerate(coords):
        atoms.append(Atom(symbols[i], position=coords[i]))
    return Molecule(symbols=atoms)


def ts6() -> Molecule:
    """Create template with d(B(72)-Ir(19)-C(24)-H(27)) = 10 degrees.
    Values in parentheses are indices in xmol file."""

    coords = [
        [-1.65240, -0.61750, 0.43160],
        [-2.28440, 0.52410, 0.78570],
        [-3.61150, 0.76210, 0.40120],
        [-4.28840, -0.19500, -0.34950],
        [-3.62560, -1.37130, -0.70230],
        [-2.30540, -1.53890, -0.29300],
        [-1.73290, -2.42610, -0.54530],
        [-4.11610, -2.14550, -1.28550],
        [-4.11430, 1.68270, 0.67650],
        [-1.48980, 1.48940, 1.58530],
        [-0.19170, 1.16600, 1.80930],
        [0.59330, 1.99890, 2.51430],
        [0.11810, 3.19500, 3.04490],
        [-1.21740, 3.53900, 2.83330],
        [-2.02640, 2.67930, 2.09520],
        [-3.06710, 2.93300, 1.92650],
        [0.78570, 3.83750, 3.61210],
        [1.62320, 1.67820, 2.62890],
        [0.53030, -0.77240, 0.98680],
        [0.27050, -1.69590, 5.36640],
        [-0.95570, -2.34420, 5.54280],
        [-1.72280, -2.66840, 4.42030],
        [-1.26800, -2.34080, 3.13910],
        [-0.04480, -1.67750, 2.94200],
        [0.72250, -1.37810, 4.08300],
        [1.67150, -0.86350, 3.96630],
        [0.63790, -2.27320, 1.56300],
        [-1.87200, -2.61050, 2.27640],
        [-1.30470, -2.60040, 6.54100],
        [0.98660, 0.45290, -0.68040],
        [0.09360, 0.67400, -1.72720],
        [0.52380, 1.85170, -2.44940],
        [0.18750, 1.67570, -3.92720],
        [0.60520, 0.74590, -4.31800],
        [0.57590, 2.51300, -4.51840],
        [-0.89910, 1.63980, -4.05620],
        [-0.26060, 3.03430, -1.86130],
        [-0.04870, 3.96950, -2.39000],
        [-1.33060, 2.82000, -1.94320],
        [-0.02310, 3.16660, -0.80140],
        [2.05600, 1.90510, -2.11520],
        [2.10010, 1.27470, -0.81120],
        [2.90970, 1.04740, -3.05830],
        [2.53450, 0.02280, -3.07770],
        [2.92850, 1.45690, -4.07350],
        [3.93460, 1.01480, -2.67730],
        [2.64290, 3.30970, -2.00040],
        [2.14450, 3.88920, -1.22050],
        [3.70560, 3.24440, -1.74560],
        [2.55160, 3.84770, -2.95100],
        [2.52020, -0.71780, 1.41830],
        [3.45490, -1.72220, 1.13740],
        [4.77220, -1.13650, 1.22250],
        [5.77760, -2.21650, 1.60960],
        [5.47190, -2.74220, 2.51680],
        [5.85500, -2.95230, 0.80240],
        [6.77100, -1.78240, 1.77180],
        [5.09530, -0.57450, -0.17080],
        [6.11200, -0.16940, -0.22070],
        [4.99360, -1.38210, -0.90120],
        [4.37700, 0.20350, -0.44150],
        [4.55310, -0.01210, 2.29340],
        [3.16640, 0.34210, 2.06880],
        [5.41080, 1.23600, 2.10520],
        [5.20400, 1.71050, 1.14410],
        [5.19150, 1.96040, 2.89680],
        [6.47710, 0.98690, 2.15540],
        [4.66810, -0.52920, 3.73330],
        [4.06890, -1.43420, 3.86610],
        [5.70570, -0.75160, 4.00300],
        [4.28890, 0.23680, 4.41720],
        [1.06350, -2.12320, -0.48920],
        [0.46150, -3.38300, -0.62010],
        [1.25340, -4.15660, -1.55840],
        [2.31640, -4.89420, -0.73110],
        [2.96100, -4.17700, -0.21360],
        [1.81240, -5.50620, 0.02330],
        [2.93270, -5.54910, -1.35610],
        [0.34510, -5.14750, -2.27820],
        [-0.03780, -5.88320, -1.56360],
        [0.89850, -5.68380, -3.05760],
        [-0.50850, -4.64510, -2.73880],
        [1.86760, -3.03100, -2.45540],
        [1.99260, -1.94120, -1.51330],
        [3.24740, -3.33740, -3.03230],
        [3.21220, -4.21920, -3.68240],
        [3.59430, -2.48640, -3.62740],
        [3.97650, -3.51280, -2.23880],
        [0.91120, -2.57250, -3.56480],
        [-0.06940, -2.32660, -3.14880],
        [1.31100, -1.66960, -4.03380],
        [0.79190, -3.33930, -4.33710],
        [0.87950, -1.43850, 6.23170],
        [-2.67600, -3.18110, 4.54130],
        [-5.31770, -0.02250, -0.65370],
        [-1.62610, 4.46300, 3.23480],
    ]
    coords = [[float(j) / Bohr for j in i] for i in coords]

    symbols = [
        "N",
        "C",
        "C",
        "C",
        "C",
        "C",
        "H",
        "H",
        "H",
        "C",
        "N",
        "C",
        "C",
        "C",
        "C",
        "H",
        "H",
        "H",
        "Ir",
        "C",
        "C",
        "C",
        "C",
        "C",
        "C",
        "H",
        "H",
        "H",
        "H",
        "B",
        "O",
        "C",
        "C",
        "H",
        "H",
        "H",
        "C",
        "H",
        "H",
        "H",
        "C",
        "O",
        "C",
        "H",
        "H",
        "H",
        "C",
        "H",
        "H",
        "H",
        "B",
        "O",
        "C",
        "C",
        "H",
        "H",
        "H",
        "C",
        "H",
        "H",
        "H",
        "C",
        "O",
        "C",
        "H",
        "H",
        "H",
        "C",
        "H",
        "H",
        "H",
        "B",
        "O",
        "C",
        "C",
        "H",
        "H",
        "H",
        "C",
        "H",
        "H",
        "H",
        "C",
        "O",
        "C",
        "H",
        "H",
        "H",
        "C",
        "H",
        "H",
        "H",
        "H",
        "H",
        "H",
        "H",
    ]

    atoms = []
    for i, _ in enumerate(coords):
        atoms.append(Atom(symbols[i], position=coords[i]))
    return Molecule(symbols=atoms)


def ts7() -> Molecule:
    """Create template with d(B(72)-Ir(19)-C(24)-H(27)) = 20 degrees.
    Values in parentheses are indices in xmol file."""

    coords = [
        [-1.61820, -0.28430, 0.60260],
        [-2.05230, 0.90680, 1.07200],
        [-3.37270, 1.32750, 0.85800],
        [-4.24810, 0.50680, 0.15300],
        [-3.78630, -0.71990, -0.32510],
        [-2.46300, -1.07440, -0.07790],
        [-2.04470, -2.01330, -0.42670],
        [-4.43370, -1.39300, -0.88000],
        [-3.71980, 2.28370, 1.23350],
        [-1.05490, 1.72610, 1.80580],
        [0.19760, 1.21480, 1.90160],
        [1.15780, 1.91010, 2.53720],
        [0.91160, 3.14930, 3.12130],
        [-0.37300, 3.68710, 3.03930],
        [-1.36320, 2.96980, 2.37400],
        [-2.36530, 3.37780, 2.30290],
        [1.71500, 3.67680, 3.62770],
        [2.13530, 1.44070, 2.55350],
        [0.55640, -0.78070, 0.96480],
        [0.29660, -1.79190, 5.32240],
        [-0.96570, -2.36670, 5.50050],
        [-1.76540, -2.61970, 4.38220],
        [-1.30860, -2.29120, 3.10220],
        [-0.05270, -1.69350, 2.90610],
        [0.75010, -1.47140, 4.03970],
        [1.73450, -1.02770, 3.91430],
        [0.61700, -2.29140, 1.52170],
        [-1.93660, -2.50500, 2.24110],
        [-1.31720, -2.62440, 6.49740],
        [1.07320, 0.41870, -0.70060],
        [0.15320, 0.80280, -1.67450],
        [0.71180, 1.91290, -2.41500],
        [0.24360, 1.82600, -3.86480],
        [0.47500, 0.85010, -4.29590],
        [0.71800, 2.60280, -4.47530],
        [-0.84100, 1.96810, -3.91120],
        [0.17310, 3.19240, -1.75700],
        [0.49320, 4.09340, -2.29060],
        [-0.92060, 3.15390, -1.75970],
        [0.50620, 3.26100, -0.71690],
        [2.25290, 1.71420, -2.19720],
        [2.28990, 1.06230, -0.90360],
        [2.88470, 0.74420, -3.20420],
        [2.34500, -0.20450, -3.20220],
        [2.89930, 1.16260, -4.21590],
        [3.91420, 0.53710, -2.89790],
        [3.06570, 3.00370, -2.12030],
        [2.72740, 3.64120, -1.30070],
        [4.12030, 2.76490, -1.94950],
        [2.99060, 3.56680, -3.05770],
        [2.55770, -1.01010, 1.25060],
        [3.32020, -2.11960, 0.87280],
        [4.71240, -1.74200, 0.93140],
        [5.55380, -2.97960, 1.22800],
        [5.19890, -3.49910, 2.12080],
        [5.49300, -3.67530, 0.38490],
        [6.60620, -2.70870, 1.37260],
        [5.06980, -1.16080, -0.44530],
        [6.13410, -0.91170, -0.51910],
        [4.82130, -1.90490, -1.20760],
        [4.46950, -0.27020, -0.64840],
        [4.70150, -0.65750, 2.06260],
        [3.38170, -0.08350, 1.90460],
        [5.73900, 0.45070, 1.90670],
        [5.58940, 0.99920, 0.97480],
        [5.65360, 1.15950, 2.73710],
        [6.75390, 0.03660, 1.91470],
        [4.76710, -1.26250, 3.47090],
        [4.02870, -2.06220, 3.58020],
        [5.76030, -1.66570, 3.69410],
        [4.53690, -0.48270, 4.20400],
        [0.72350, -2.15190, -0.57110],
        [-0.09840, -3.28360, -0.67240],
        [0.47150, -4.15430, -1.68420],
        [1.44540, -5.09210, -0.95580],
        [2.24580, -4.51610, -0.48120],
        [0.89940, -5.62810, -0.17350],
        [1.88670, -5.82630, -1.63800],
        [-0.64860, -4.94780, -2.34810],
        [-1.10260, -5.62760, -1.61990],
        [-0.25740, -5.54760, -3.17790],
        [-1.43080, -4.28930, -2.73220],
        [1.20710, -3.12690, -2.60790],
        [1.59160, -2.10450, -1.66090],
        [2.46520, -3.65220, -3.29490],
        [2.22880, -4.49850, -3.95020],
        [2.90820, -2.85900, -3.90590],
        [3.21070, -3.96940, -2.56320],
        [0.26900, -2.47540, -3.63310],
        [-0.61930, -2.07190, -3.13960],
        [0.78860, -1.64400, -4.11660],
        [-0.04100, -3.18620, -4.40580],
        [0.93210, -1.59680, 6.18490],
        [-2.74500, -3.07890, 4.50590],
        [-5.27420, 0.82210, -0.01880],
        [-0.60390, 4.65190, 3.48410],
    ]
    coords = [[float(j) / Bohr for j in i] for i in coords]

    symbols = [
        "N",
        "C",
        "C",
        "C",
        "C",
        "C",
        "H",
        "H",
        "H",
        "C",
        "N",
        "C",
        "C",
        "C",
        "C",
        "H",
        "H",
        "H",
        "Ir",
        "C",
        "C",
        "C",
        "C",
        "C",
        "C",
        "H",
        "H",
        "H",
        "H",
        "B",
        "O",
        "C",
        "C",
        "H",
        "H",
        "H",
        "C",
        "H",
        "H",
        "H",
        "C",
        "O",
        "C",
        "H",
        "H",
        "H",
        "C",
        "H",
        "H",
        "H",
        "B",
        "O",
        "C",
        "C",
        "H",
        "H",
        "H",
        "C",
        "H",
        "H",
        "H",
        "C",
        "O",
        "C",
        "H",
        "H",
        "H",
        "C",
        "H",
        "H",
        "H",
        "B",
        "O",
        "C",
        "C",
        "H",
        "H",
        "H",
        "C",
        "H",
        "H",
        "H",
        "C",
        "O",
        "C",
        "H",
        "H",
        "H",
        "C",
        "H",
        "H",
        "H",
        "H",
        "H",
        "H",
        "H",
    ]

    atoms = []
    for i, _ in enumerate(coords):
        atoms.append(Atom(symbols[i], position=coords[i]))
    return Molecule(symbols=atoms)


def ts8() -> Molecule:
    """Create template with d(B(72)-Ir(19)-C(24)-H(27)) = 30 degrees.
    Values in parentheses are indices in xmol file."""

    coords = [
        [-1.52100, 0.02100, 0.74400],
        [-1.75340, 1.24440, 1.27050],
        [-3.01020, 1.85510, 1.15040],
        [-4.03670, 1.18930, 0.48770],
        [-3.78730, -0.07720, -0.04050],
        [-2.51530, -0.62170, 0.11040],
        [-2.26190, -1.60050, -0.28280],
        [-4.55850, -0.63640, -0.56240],
        [-3.19180, 2.84020, 1.56540],
        [-0.61360, 1.89000, 1.96910],
        [0.55340, 1.19990, 1.98830],
        [1.63110, 1.72600, 2.59790],
        [1.59340, 2.96710, 3.22790],
        [0.39810, 3.68740, 3.22230],
        [-0.71520, 3.14510, 2.58580],
        [-1.64980, 3.69420, 2.57740],
        [2.48640, 3.35510, 3.70980],
        [2.53140, 1.12260, 2.55050],
        [0.57930, -0.79890, 0.96150],
        [0.26750, -1.84280, 5.30730],
        [-1.04310, -2.29620, 5.49070],
        [-1.86770, -2.46800, 4.37390],
        [-1.39000, -2.17540, 3.09240],
        [-0.08770, -1.68930, 2.89420],
        [0.74060, -1.55670, 4.02290],
        [1.76420, -1.21310, 3.88980],
        [0.58700, -2.30950, 1.52200],
        [-2.03760, -2.32800, 2.23290],
        [-1.41180, -2.52620, 6.48800],
        [1.17420, 0.36580, -0.70310],
        [0.26010, 0.97810, -1.55920],
        [0.96010, 1.98680, -2.32460],
        [0.34010, 2.07000, -3.71620],
        [0.31850, 1.08960, -4.19630],
        [0.90260, 2.76220, -4.35320],
        [-0.68990, 2.43330, -3.64050],
        [0.77230, 3.31480, -1.57500],
        [1.21670, 4.15720, -2.11550],
        [-0.29940, 3.50120, -1.45550],
        [1.21920, 3.26050, -0.57760],
        [2.43880, 1.46580, -2.28440],
        [2.47010, 0.76100, -1.01930],
        [2.74430, 0.43420, -3.37830],
        [2.01350, -0.37600, -3.34660],
        [2.75320, 0.88960, -4.37400],
        [3.72790, -0.00390, -3.18520],
        [3.50790, 2.55520, -2.26690],
        [3.39970, 3.20700, -1.39750],
        [4.50090, 2.09650, -2.22320],
        [3.45390, 3.16720, -3.17480],
        [2.55280, -1.29900, 1.09110],
        [3.13150, -2.47160, 0.60180],
        [4.56490, -2.29970, 0.60900],
        [5.22900, -3.65970, 0.80530],
        [4.84260, -4.16980, 1.69030],
        [5.02890, -4.29330, -0.06470],
        [6.31510, -3.55140, 0.90690],
        [4.94600, -1.70590, -0.75550],
        [6.03090, -1.60240, -0.86560],
        [4.56940, -2.37250, -1.53700],
        [4.46690, -0.73340, -0.89370],
        [4.76110, -1.28680, 1.78990],
        [3.52760, -0.52970, 1.73860],
        [5.93370, -0.32410, 1.62670],
        [5.81690, 0.28730, 0.72980],
        [5.98860, 0.34570, 2.49130],
        [6.87980, -0.87360, 1.55970],
        [4.81220, -1.97080, 3.16230],
        [3.97420, -2.66470, 3.27670],
        [5.74820, -2.51980, 3.30850],
        [4.73230, -1.20770, 3.94300],
        [0.39460, -2.14030, -0.58890],
        [-0.58180, -3.14810, -0.60310],
        [-0.27960, -4.04290, -1.70530],
        [0.63550, -5.13940, -1.14150],
        [1.56620, -4.70290, -0.76630],
        [0.12590, -5.62900, -0.30600],
        [0.87270, -5.89620, -1.89660],
        [-1.57940, -4.64170, -2.23180],
        [-2.02840, -5.28180, -1.46570],
        [-1.39100, -5.25370, -3.12140],
        [-2.30160, -3.86400, -2.49080],
        [0.46890, -3.08650, -2.69230],
        [1.12010, -2.17500, -1.77860],
        [1.53290, -3.75010, -3.56270],
        [1.08890, -4.52270, -4.20120],
        [2.00040, -2.99930, -4.20800],
        [2.31590, -4.20350, -2.95190],
        [-0.49140, -2.25860, -3.55810],
        [-1.24560, -1.76830, -2.93640],
        [0.07460, -1.47730, -4.07240],
        [-0.99350, -2.87630, -4.30970],
        [0.92540, -1.71770, 6.16610],
        [-2.88450, -2.83650, 4.50070],
        [-5.01460, 1.65360, 0.38800],
        [0.33140, 4.65910, 3.70530],
    ]
    coords = [[float(j) / Bohr for j in i] for i in coords]

    symbols = [
        "N",
        "C",
        "C",
        "C",
        "C",
        "C",
        "H",
        "H",
        "H",
        "C",
        "N",
        "C",
        "C",
        "C",
        "C",
        "H",
        "H",
        "H",
        "Ir",
        "C",
        "C",
        "C",
        "C",
        "C",
        "C",
        "H",
        "H",
        "H",
        "H",
        "B",
        "O",
        "C",
        "C",
        "H",
        "H",
        "H",
        "C",
        "H",
        "H",
        "H",
        "C",
        "O",
        "C",
        "H",
        "H",
        "H",
        "C",
        "H",
        "H",
        "H",
        "B",
        "O",
        "C",
        "C",
        "H",
        "H",
        "H",
        "C",
        "H",
        "H",
        "H",
        "C",
        "O",
        "C",
        "H",
        "H",
        "H",
        "C",
        "H",
        "H",
        "H",
        "B",
        "O",
        "C",
        "C",
        "H",
        "H",
        "H",
        "C",
        "H",
        "H",
        "H",
        "C",
        "O",
        "C",
        "H",
        "H",
        "H",
        "C",
        "H",
        "H",
        "H",
        "H",
        "H",
        "H",
        "H",
    ]

    atoms = []
    for i, _ in enumerate(coords):
        atoms.append(Atom(symbols[i], position=coords[i]))
    return Molecule(symbols=atoms)


def ts9() -> Molecule:
    """Create template with d(B(72)-Ir(19)-C(24)-H(27)) = 40 degrees.
    Values in parentheses are indices in xmol file."""

    coords = [
        [-1.29830, 0.38920, 0.92820],
        [-1.29710, 1.56690, 1.59440],
        [-2.42720, 2.39810, 1.59740],
        [-3.57000, 2.00090, 0.90940],
        [-3.56100, 0.78080, 0.23370],
        [-2.40370, 0.00810, 0.26770],
        [-2.34030, -0.95000, -0.23490],
        [-4.43140, 0.42960, -0.31310],
        [-2.42280, 3.34350, 2.12690],
        [-0.04470, 1.91850, 2.30950],
        [0.99400, 1.05770, 2.17490],
        [2.15960, 1.32360, 2.79160],
        [2.34370, 2.45470, 3.58200],
        [1.28250, 3.34640, 3.73500],
        [0.07930, 3.07610, 3.08990],
        [-0.75390, 3.76080, 3.20120],
        [3.30270, 2.62760, 4.06170],
        [2.95110, 0.60440, 2.61340],
        [0.63540, -0.79670, 0.94730],
        [0.01080, -1.99080, 5.22610],
        [-1.31820, -2.42260, 5.28710],
        [-2.05660, -2.54260, 4.10560],
        [-1.47430, -2.21650, 2.87730],
        [-0.15450, -1.74460, 2.80480],
        [0.58840, -1.66930, 3.99400],
        [1.62610, -1.34450, 3.95330],
        [0.56830, -2.32880, 1.44140],
        [-2.03820, -2.33800, 1.95620],
        [-1.76840, -2.67840, 6.24420],
        [1.25770, 0.32340, -0.73780],
        [0.34670, 1.01190, -1.54090],
        [1.08170, 1.90770, -2.40470],
        [0.35480, 2.00960, -3.74280],
        [0.18440, 1.02150, -4.17420],
        [0.93000, 2.61170, -4.45560],
        [-0.61930, 2.48810, -3.59780],
        [1.10130, 3.27480, -1.70440],
        [1.58610, 4.04290, -2.31610],
        [0.06950, 3.58250, -1.50840],
        [1.62240, 3.20710, -0.74450],
        [2.49420, 1.22710, -2.46170],
        [2.55730, 0.55930, -1.17810],
        [2.59450, 0.13670, -3.53660],
        [1.79310, -0.59320, -3.40790],
        [2.55700, 0.55820, -4.54650],
        [3.54370, -0.39350, -3.41530],
        [3.67140, 2.19260, -2.57260],
        [3.70530, 2.88190, -1.72640],
        [4.60970, 1.62900, -2.58640],
        [3.60890, 2.77530, -3.49900],
        [2.53280, -1.56250, 0.89230],
        [2.89830, -2.80510, 0.37360],
        [4.33860, -2.83600, 0.26790],
        [4.81930, -4.27550, 0.42530],
        [4.43190, -4.72780, 1.34100],
        [4.46950, -4.87400, -0.42190],
        [5.91440, -4.31910, 0.44660],
        [4.69080, -2.29470, -1.12550],
        [5.76710, -2.34590, -1.32230],
        [4.16140, -2.89490, -1.87130],
        [4.34720, -1.26200, -1.22730],
        [4.76440, -1.86270, 1.41980],
        [3.65690, -0.93100, 1.43650],
        [6.05410, -1.08620, 1.17060],
        [5.96910, -0.46090, 0.27980],
        [6.26670, -0.43430, 2.02450],
        [6.90090, -1.77050, 1.04470],
        [4.80110, -2.54300, 2.79500],
        [3.87790, -3.10330, 2.97030],
        [5.65210, -3.22550, 2.88920],
        [4.88660, -1.77430, 3.56970],
        [0.09280, -2.05710, -0.58020],
        [-1.08650, -2.81780, -0.51770],
        [-1.05840, -3.77420, -1.60810],
        [-0.39700, -5.04560, -1.05800],
        [0.62950, -4.83560, -0.74240],
        [-0.96100, -5.38560, -0.18420],
        [-0.38470, -5.85010, -1.80050],
        [-2.48820, -4.06060, -2.05500],
        [-3.03270, -4.56650, -1.25100],
        [-2.49610, -4.71280, -2.93580],
        [-3.02200, -3.13940, -2.29930],
        [-0.16070, -3.03290, -2.65510],
        [0.72460, -2.27140, -1.80160],
        [0.68180, -3.94180, -3.54640],
        [0.04360, -4.60680, -4.13970],
        [1.27610, -3.33250, -4.23490],
        [1.36960, -4.54810, -2.95400],
        [-0.95100, -2.03080, -3.50810],
        [-1.52920, -1.35400, -2.87300],
        [-0.25060, -1.42510, -4.08900],
        [-1.62810, -2.53730, -4.20330],
        [0.59900, -1.90990, 6.13890],
        [-3.08510, -2.89870, 4.14140],
        [-4.45270, 2.63530, 0.90390],
        [1.38660, 4.24060, 4.34420],
    ]
    coords = [[float(j) / Bohr for j in i] for i in coords]

    symbols = [
        "N",
        "C",
        "C",
        "C",
        "C",
        "C",
        "H",
        "H",
        "H",
        "C",
        "N",
        "C",
        "C",
        "C",
        "C",
        "H",
        "H",
        "H",
        "Ir",
        "C",
        "C",
        "C",
        "C",
        "C",
        "C",
        "H",
        "H",
        "H",
        "H",
        "B",
        "O",
        "C",
        "C",
        "H",
        "H",
        "H",
        "C",
        "H",
        "H",
        "H",
        "C",
        "O",
        "C",
        "H",
        "H",
        "H",
        "C",
        "H",
        "H",
        "H",
        "B",
        "O",
        "C",
        "C",
        "H",
        "H",
        "H",
        "C",
        "H",
        "H",
        "H",
        "C",
        "O",
        "C",
        "H",
        "H",
        "H",
        "C",
        "H",
        "H",
        "H",
        "B",
        "O",
        "C",
        "C",
        "H",
        "H",
        "H",
        "C",
        "H",
        "H",
        "H",
        "C",
        "O",
        "C",
        "H",
        "H",
        "H",
        "C",
        "H",
        "H",
        "H",
        "H",
        "H",
        "H",
        "H",
    ]

    atoms = []
    for i, _ in enumerate(coords):
        atoms.append(Atom(symbols[i], position=coords[i]))
    return Molecule(symbols=atoms)


def ts19() -> Molecule:
    """Create template with d(B(51)-Ir(19)-C(24)-H(27)) = 320 degrees.
    Values in parentheses are indices in xmol file."""

    coords = [
        [-1.21750, 0.53530, 0.97420],
        [-1.20010, 1.63930, 1.75580],
        [-2.31350, 2.48900, 1.83100],
        [-3.45620, 2.18480, 1.09680],
        [-3.46390, 1.03720, 0.30390],
        [-2.32190, 0.24300, 0.27080],
        [-2.27560, -0.66460, -0.31910],
        [-4.33480, 0.75810, -0.28210],
        [-2.29400, 3.37820, 2.45080],
        [0.05120, 1.88750, 2.51240],
        [1.07370, 1.02770, 2.28480],
        [2.24000, 1.21100, 2.92650],
        [2.44060, 2.24430, 3.83820],
        [1.39110, 3.12580, 4.09310],
        [0.18670, 2.94700, 3.41900],
        [-0.63970, 3.62290, 3.60760],
        [3.40160, 2.34790, 4.33370],
        [3.02120, 0.50330, 2.67200],
        [0.63850, -0.74510, 0.92890],
        [-0.22130, -2.00510, 5.15860],
        [-1.53030, -2.49440, 5.12330],
        [-2.18050, -2.62430, 3.89200],
        [-1.53210, -2.25540, 2.70950],
        [-0.23230, -1.72450, 2.73320],
        [0.42170, -1.63670, 3.97250],
        [1.44570, -1.27060, 4.01020],
        [0.72050, -2.25190, 1.49360],
        [-2.02380, -2.39070, 1.75080],
        [-2.03210, -2.78760, 6.04330],
        [1.26820, 0.34610, -0.77290],
        [0.35730, 1.02130, -1.58880],
        [1.09340, 1.84950, -2.51710],
        [0.33950, 1.88870, -3.84380],
        [0.14110, 0.88090, -4.21340],
        [0.91030, 2.43680, -4.60230],
        [-0.62220, 2.39410, -3.70670],
        [1.15690, 3.25390, -1.89920],
        [1.64820, 3.97260, -2.56350],
        [0.13620, 3.59740, -1.70480],
        [1.69390, 3.22940, -0.94620],
        [2.49050, 1.13590, -2.56440],
        [2.56360, 0.53350, -1.24940],
        [2.54760, -0.00880, -3.58540],
        [1.73700, -0.71680, -3.40340],
        [2.49560, 0.36290, -4.61410],
        [3.48960, -0.54980, -3.45900],
        [3.68700, 2.06710, -2.74600],
        [3.75590, 2.79530, -1.93530],
        [4.61180, 1.48120, -2.75130],
        [3.61840, 2.60530, -3.69870],
        [2.52850, -1.53770, 0.79320],
        [2.85870, -2.78010, 0.25410],
        [4.29730, -2.85480, 0.14640],
        [4.73160, -4.30960, 0.30070],
        [4.33130, -4.75170, 1.21570],
        [4.36170, -4.89460, -0.54730],
        [5.82480, -4.38810, 0.32030],
        [4.66870, -2.32280, -1.24480],
        [5.74280, -2.41080, -1.44100],
        [4.11970, -2.90220, -1.99280],
        [4.36110, -1.27890, -1.34180],
        [4.75410, -1.89810, 1.30010],
        [3.67190, -0.93560, 1.32710],
        [6.06420, -1.15750, 1.04840],
        [5.99520, -0.52850, 0.15890],
        [6.29810, -0.51380, 1.90290],
        [6.89070, -1.86590, 0.91870],
        [4.77860, -2.58680, 2.67170],
        [3.84140, -3.12290, 2.84890],
        [5.61050, -3.29330, 2.75710],
        [4.88970, -1.82590, 3.45090],
        [0.03060, -2.00670, -0.56720],
        [-1.15660, -2.75320, -0.48080],
        [-1.11980, -3.76380, -1.52060],
        [-0.44720, -5.00030, -0.90670],
        [0.57770, -4.76650, -0.60270],
        [-1.00820, -5.29980, -0.01640],
        [-0.42810, -5.84150, -1.60740],
        [-2.54610, -4.08670, -1.95220],
        [-3.08710, -4.55240, -1.12180],
        [-2.54590, -4.78700, -2.79540],
        [-3.08770, -3.18510, -2.24740],
        [-0.22670, -3.06920, -2.60370],
        [0.64960, -2.25950, -1.78870],
        [0.62680, -4.01610, -3.44500],
        [-0.00280, -4.71830, -4.00390],
        [1.21690, -3.43810, -4.16350],
        [1.31970, -4.58230, -2.82000],
        [-1.02300, -2.12020, -3.51030],
        [-1.61180, -1.41860, -2.91270],
        [-0.32580, -1.53790, -4.11900],
        [-1.69210, -2.66840, -4.18170],
        [0.30250, -1.91830, 6.10950],
        [-3.19270, -3.02440, 3.85230],
        [-4.32640, 2.83430, 1.14570],
        [1.50470, 3.94170, 4.80230],
    ]
    coords = [[float(j) / Bohr for j in i] for i in coords]

    symbols = [
        "N",
        "C",
        "C",
        "C",
        "C",
        "C",
        "H",
        "H",
        "H",
        "C",
        "N",
        "C",
        "C",
        "C",
        "C",
        "H",
        "H",
        "H",
        "Ir",
        "C",
        "C",
        "C",
        "C",
        "C",
        "C",
        "H",
        "H",
        "H",
        "H",
        "B",
        "O",
        "C",
        "C",
        "H",
        "H",
        "H",
        "C",
        "H",
        "H",
        "H",
        "C",
        "O",
        "C",
        "H",
        "H",
        "H",
        "C",
        "H",
        "H",
        "H",
        "B",
        "O",
        "C",
        "C",
        "H",
        "H",
        "H",
        "C",
        "H",
        "H",
        "H",
        "C",
        "O",
        "C",
        "H",
        "H",
        "H",
        "C",
        "H",
        "H",
        "H",
        "B",
        "O",
        "C",
        "C",
        "H",
        "H",
        "H",
        "C",
        "H",
        "H",
        "H",
        "C",
        "O",
        "C",
        "H",
        "H",
        "H",
        "C",
        "H",
        "H",
        "H",
        "H",
        "H",
        "H",
        "H",
    ]

    atoms = []
    for i, _ in enumerate(coords):
        atoms.append(Atom(symbols[i], position=coords[i]))
    return Molecule(symbols=atoms)


def ts20() -> Molecule:
    """Create template with d(B(51)-Ir(19)-C(24)-H(27)) = 330 degrees.
    Values in parentheses are indices in xmol file."""

    coords = [
        [-0.95150, 0.76310, 1.13410],
        [-0.67660, 1.86640, 1.86570],
        [-1.61600, 2.90100, 1.97910],
        [-2.84660, 2.78580, 1.33930],
        [-3.11990, 1.63350, 0.60180],
        [-2.14150, 0.64790, 0.52550],
        [-2.29950, -0.27210, -0.02550],
        [-4.06930, 1.49650, 0.09220],
        [-1.39550, 3.79000, 2.55940],
        [0.65370, 1.90510, 2.52450],
        [1.47260, 0.85050, 2.29370],
        [2.69810, 0.83460, 2.84660],
        [3.16110, 1.85800, 3.67000],
        [2.32370, 2.94350, 3.92500],
        [1.06020, 2.96850, 3.34200],
        [0.40060, 3.80780, 3.52970],
        [4.15820, 1.79930, 4.09690],
        [3.30810, -0.02290, 2.58570],
        [0.62740, -0.80030, 0.96910],
        [-0.36010, -1.79910, 5.23950],
        [-1.71080, -2.15810, 5.21330],
        [-2.36030, -2.28580, 3.98170],
        [-1.67040, -2.04400, 2.79000],
        [-0.32450, -1.64160, 2.80190],
        [0.32430, -1.55510, 4.04470],
        [1.37730, -1.28590, 4.08020],
        [0.63240, -2.27570, 1.61670],
        [-2.16920, -2.17620, 1.83520],
        [-2.24670, -2.35150, 6.14040],
        [1.30370, 0.25410, -0.73600],
        [0.45670, 1.12200, -1.42770],
        [1.24590, 1.89110, -2.36190],
        [0.40920, 2.15290, -3.61160],
        [0.01500, 1.22110, -4.02230],
        [1.00360, 2.65560, -4.38320],
        [-0.43940, 2.79720, -3.35890],
        [1.58780, 3.21530, -1.66270],
        [2.13710, 3.89740, -2.32010],
        [0.65570, 3.69960, -1.35530],
        [2.18610, 3.03210, -0.76520],
        [2.49620, 0.96760, -2.57720],
        [2.57180, 0.26710, -1.31120],
        [2.27980, -0.09450, -3.66370],
        [1.37560, -0.66920, -3.45410],
        [2.21540, 0.35430, -4.66050],
        [3.12240, -0.79180, -3.65000],
        [3.81240, 1.70510, -2.80950],
        [4.06300, 2.35240, -1.96670],
        [4.62410, 0.98080, -2.93160],
        [3.75940, 2.31530, -3.71860],
        [2.35960, -1.86560, 0.64030],
        [2.45930, -3.10980, 0.01960],
        [3.85950, -3.38660, -0.20720],
        [4.08100, -4.89530, -0.15560],
        [3.68810, -5.32620, 0.76790],
        [3.56580, -5.37030, -0.99660],
        [5.14850, -5.13320, -0.22910],
        [4.20290, -2.83510, -1.59780],
        [5.23660, -3.06140, -1.88030],
        [3.52540, -3.29020, -2.32620],
        [4.04190, -1.75470, -1.62410],
        [4.53630, -2.57450, 0.94950],
        [3.61500, -1.46840, 1.10720],
        [5.92040, -2.01750, 0.63000],
        [5.88240, -1.33470, -0.22070],
        [6.30600, -1.46450, 1.49290],
        [6.62170, -2.82870, 0.40340],
        [4.55670, -3.33680, 2.28140],
        [3.56560, -3.74120, 2.50790],
        [5.27860, -4.15980, 2.26850],
        [4.83480, -2.64530, 3.08310],
        [-0.25820, -1.92210, -0.49310],
        [-1.49400, -2.57230, -0.33920],
        [-1.65060, -3.49660, -1.44540],
        [-1.03280, -4.82810, -0.99460],
        [0.03330, -4.70110, -0.78260],
        [-1.52900, -5.15170, -0.07450],
        [-1.15680, -5.60950, -1.75160],
        [-3.13570, -3.66580, -1.74710],
        [-3.63170, -4.15550, -0.90270],
        [-3.28090, -4.28920, -2.63680],
        [-3.62130, -2.70160, -1.91390],
        [-0.81130, -2.79350, -2.56440],
        [0.21020, -2.12930, -1.79150],
        [-0.13700, -3.73650, -3.55860],
        [-0.88050, -4.34040, -4.09170],
        [0.42410, -3.15350, -4.29630],
        [0.56440, -4.40310, -3.05340],
        [-1.60270, -1.70940, -3.30940],
        [-2.07240, -1.01980, -2.60230],
        [-0.91500, -1.13100, -3.93270],
        [-2.37620, -2.14080, -3.95330],
        [0.16320, -1.71400, 6.19070],
        [-3.40740, -2.58380, 3.94860],
        [-3.58120, 3.58300, 1.42030],
        [2.64690, 3.76160, 4.56380],
    ]
    coords = [[float(j) / Bohr for j in i] for i in coords]

    symbols = [
        "N",
        "C",
        "C",
        "C",
        "C",
        "C",
        "H",
        "H",
        "H",
        "C",
        "N",
        "C",
        "C",
        "C",
        "C",
        "H",
        "H",
        "H",
        "Ir",
        "C",
        "C",
        "C",
        "C",
        "C",
        "C",
        "H",
        "H",
        "H",
        "H",
        "B",
        "O",
        "C",
        "C",
        "H",
        "H",
        "H",
        "C",
        "H",
        "H",
        "H",
        "C",
        "O",
        "C",
        "H",
        "H",
        "H",
        "C",
        "H",
        "H",
        "H",
        "B",
        "O",
        "C",
        "C",
        "H",
        "H",
        "H",
        "C",
        "H",
        "H",
        "H",
        "C",
        "O",
        "C",
        "H",
        "H",
        "H",
        "C",
        "H",
        "H",
        "H",
        "B",
        "O",
        "C",
        "C",
        "H",
        "H",
        "H",
        "C",
        "H",
        "H",
        "H",
        "C",
        "O",
        "C",
        "H",
        "H",
        "H",
        "C",
        "H",
        "H",
        "H",
        "H",
        "H",
        "H",
        "H",
    ]

    atoms = []
    for i, _ in enumerate(coords):
        atoms.append(Atom(symbols[i], position=coords[i]))
    return Molecule(symbols=atoms)


def ts21() -> Molecule:
    """Create template with d(B(51)-Ir(19)-C(24)-H(27)) = 340 degrees.
    Values in parentheses are indices in xmol file."""

    coords = [
        [-0.68020, 0.94030, 1.25760],
        [-0.17390, 1.98910, 1.94640],
        [-0.94800, 3.13640, 2.16930],
        [-2.24900, 3.19470, 1.67920],
        [-2.75920, 2.09900, 0.98260],
        [-1.93920, 0.99140, 0.79710],
        [-2.28410, 0.10520, 0.27670],
        [-3.77190, 2.09610, 0.59050],
        [-0.54750, 3.97520, 2.72740],
        [1.21660, 1.84100, 2.44620],
        [1.81090, 0.64440, 2.22050],
        [3.07170, 0.44330, 2.63940],
        [3.79820, 1.41830, 3.31800],
        [3.19870, 2.65500, 3.55690],
        [1.89730, 2.87020, 3.11130],
        [1.42400, 3.83130, 3.27920],
        [4.81340, 1.20890, 3.64270],
        [3.49140, -0.52360, 2.38620],
        [0.60530, -0.83850, 0.97220],
        [-0.39920, -1.59130, 5.28360],
        [-1.77180, -1.85410, 5.28930],
        [-2.44510, -1.99080, 4.07200],
        [-1.75770, -1.85400, 2.86190],
        [-0.38600, -1.54870, 2.83920],
        [0.28320, -1.45090, 4.07120],
        [1.35190, -1.25300, 4.08510],
        [0.54950, -2.27860, 1.69260],
        [-2.28110, -1.98840, 1.92140],
        [-2.30680, -1.96560, 6.23030],
        [1.34730, 0.15800, -0.73880],
        [0.65410, 1.23060, -1.30310],
        [1.52090, 1.89220, -2.25120],
        [0.67410, 2.41610, -3.40820],
        [0.06770, 1.61880, -3.84290],
        [1.30630, 2.84680, -4.19330],
        [-0.00240, 3.19710, -3.04570],
        [2.18220, 3.05860, -1.50180],
        [2.81520, 3.66390, -2.15920],
        [1.39660, 3.69740, -1.08610],
        [2.79000, 2.68620, -0.67140],
        [2.53030, 0.75200, -2.62710],
        [2.54660, -0.04300, -1.41610],
        [2.01850, -0.15500, -3.75450],
        [1.02740, -0.54040, -3.50800],
        [1.98720, 0.37110, -4.71440],
        [2.68990, -1.01320, -3.84910],
        [3.95180, 1.22050, -2.92510],
        [4.39070, 1.73600, -2.06840],
        [4.58260, 0.35680, -3.15870],
        [3.96470, 1.89660, -3.78780],
        [2.10990, -2.16640, 0.47620],
        [1.94900, -3.39040, -0.17110],
        [3.25910, -3.88000, -0.53730],
        [3.23820, -5.40590, -0.52710],
        [2.86810, -5.79520, 0.42370],
        [2.57770, -5.76850, -1.32130],
        [4.24170, -5.80900, -0.70610],
        [3.55270, -3.35290, -1.94820],
        [4.50320, -3.73640, -2.33410],
        [2.74340, -3.67270, -2.61140],
        [3.56840, -2.26060, -1.94610],
        [4.16420, -3.21850, 0.55900],
        [3.44740, -1.98930, 0.83200],
        [5.57890, -2.86950, 0.10710],
        [5.56170, -2.16060, -0.72270],
        [6.13110, -2.41230, 0.93480],
        [6.11850, -3.77050, -0.20660],
        [4.19900, -4.01910, 1.86780],
        [3.18510, -4.27380, 2.19030],
        [4.77840, -4.94230, 1.76430],
        [4.66160, -3.40590, 2.64750],
        [-0.51520, -1.78990, -0.44500],
        [-1.76970, -2.38140, -0.22590],
        [-2.08840, -3.19650, -1.38240],
        [-1.51470, -4.59460, -1.10720],
        [-0.42870, -4.54310, -0.98270],
        [-1.94830, -4.97400, -0.17660],
        [-1.75330, -5.29640, -1.91340],
        [-3.60280, -3.25720, -1.54850],
        [-4.04750, -3.79690, -0.70610],
        [-3.86940, -3.78530, -2.47120],
        [-4.04070, -2.25690, -1.58030],
        [-1.31810, -2.44400, -2.51810],
        [-0.18950, -1.90650, -1.79970],
        [-0.80220, -3.33110, -3.64910],
        [-1.62880, -3.84770, -4.15070],
        [-0.28070, -2.71740, -4.39080],
        [-0.09720, -4.07440, -3.27190],
        [-2.10700, -1.25610, -3.08780],
        [-2.47910, -0.61760, -2.28140],
        [-1.44020, -0.65250, -3.71060],
        [-2.95430, -1.58440, -3.69890],
        [0.14230, -1.49900, 6.22390],
        [-3.51130, -2.21300, 4.06420],
        [-2.85630, 4.08050, 1.84640],
        [3.73510, 3.44480, 4.07680],
    ]
    coords = [[float(j) / Bohr for j in i] for i in coords]

    symbols = [
        "N",
        "C",
        "C",
        "C",
        "C",
        "C",
        "H",
        "H",
        "H",
        "C",
        "N",
        "C",
        "C",
        "C",
        "C",
        "H",
        "H",
        "H",
        "Ir",
        "C",
        "C",
        "C",
        "C",
        "C",
        "C",
        "H",
        "H",
        "H",
        "H",
        "B",
        "O",
        "C",
        "C",
        "H",
        "H",
        "H",
        "C",
        "H",
        "H",
        "H",
        "C",
        "O",
        "C",
        "H",
        "H",
        "H",
        "C",
        "H",
        "H",
        "H",
        "B",
        "O",
        "C",
        "C",
        "H",
        "H",
        "H",
        "C",
        "H",
        "H",
        "H",
        "C",
        "O",
        "C",
        "H",
        "H",
        "H",
        "C",
        "H",
        "H",
        "H",
        "B",
        "O",
        "C",
        "C",
        "H",
        "H",
        "H",
        "C",
        "H",
        "H",
        "H",
        "C",
        "O",
        "C",
        "H",
        "H",
        "H",
        "C",
        "H",
        "H",
        "H",
        "H",
        "H",
        "H",
        "H",
    ]

    atoms = []
    for i, _ in enumerate(coords):
        atoms.append(Atom(symbols[i], position=coords[i]))
    return Molecule(symbols=atoms)


def ts22() -> Molecule:
    """Create template with d(B(51)-Ir(19)-C(24)-H(27)) = 350 degrees.
    Values in parentheses are indices in xmol file."""

    coords = [
        [-0.44440, 1.07910, 1.34910],
        [0.26740, 2.06170, 1.94720],
        [-0.33070, 3.29240, 2.24940],
        [-1.66660, 3.50720, 1.92420],
        [-2.38800, 2.48030, 1.31360],
        [-1.73650, 1.28080, 1.04940],
        [-2.24840, 0.43930, 0.59620],
        [-3.43560, 2.59790, 1.05180],
        [0.23280, 4.07240, 2.74900],
        [1.68030, 1.74910, 2.27380],
        [2.06590, 0.46200, 2.09360],
        [3.33480, 0.10910, 2.36140],
        [4.27760, 1.01780, 2.83640],
        [3.89300, 2.34680, 3.02340],
        [2.58280, 2.71850, 2.73350],
        [2.27580, 3.75150, 2.85350],
        [5.29170, 0.68710, 3.04290],
        [3.58000, -0.92590, 2.14950],
        [0.55370, -0.84990, 0.97960],
        [-0.37840, -1.35720, 5.33780],
        [-1.75740, -1.57810, 5.39380],
        [-2.46740, -1.75130, 4.20230],
        [-1.81080, -1.69460, 2.96850],
        [-0.43170, -1.43560, 2.89250],
        [0.27220, -1.29600, 4.10200],
        [1.34580, -1.12810, 4.07760],
        [0.46960, -2.24870, 1.77480],
        [-2.36690, -1.85670, 2.05190],
        [-2.26890, -1.62870, 6.35310],
        [1.38670, 0.06680, -0.73070],
        [1.06830, 1.38360, -1.07480],
        [2.03530, 1.84630, -2.04650],
        [1.34930, 2.81950, -3.00040],
        [0.46000, 2.37060, -3.44790],
        [2.03070, 3.12640, -3.80240],
        [1.03890, 3.71570, -2.45320],
        [3.14530, 2.55830, -1.25870],
        [3.89620, 3.00330, -1.92020],
        [2.69460, 3.35260, -0.65580],
        [3.64270, 1.86040, -0.57850],
        [2.51170, 0.50220, -2.69330],
        [2.37010, -0.41950, -1.58730],
        [1.58090, 0.01090, -3.81020],
        [0.54650, -0.00670, -3.46090],
        [1.66050, 0.63340, -4.70770],
        [1.85530, -1.01630, -4.06700],
        [3.96420, 0.48600, -3.16160],
        [4.65130, 0.67490, -2.33420],
        [4.20370, -0.49620, -3.58190],
        [4.13170, 1.24070, -3.93870],
        [1.78230, -2.38890, 0.33490],
        [1.37670, -3.53040, -0.35210],
        [2.55420, -4.21230, -0.83840],
        [2.27830, -5.71410, -0.86350],
        [1.92630, -6.07390, 0.10550],
        [1.50330, -5.93140, -1.60560],
        [3.18130, -6.27060, -1.13980],
        [2.81580, -3.69290, -2.25890],
        [3.66570, -4.20290, -2.72500],
        [1.92130, -3.87360, -2.86310],
        [2.99170, -2.61550, -2.24190],
        [3.64140, -3.75350, 0.19810],
        [3.15000, -2.45050, 0.59740],
        [5.04660, -3.58750, -0.37280],
        [5.05940, -2.83510, -1.16370],
        [5.73230, -3.26450, 0.41760],
        [5.41540, -4.53650, -0.77850],
        [3.67110, -4.62670, 1.45950],
        [2.66380, -4.74560, 1.86970],
        [4.08830, -5.61850, 1.25750],
        [4.29220, -4.13690, 2.21590],
        [-0.77130, -1.64440, -0.36030],
        [-1.98000, -2.28430, -0.05730],
        [-2.45820, -2.95090, -1.25080],
        [-1.89480, -4.37880, -1.21500],
        [-0.80230, -4.35650, -1.19630],
        [-2.23780, -4.86660, -0.29700],
        [-2.23720, -4.96930, -2.07180],
        [-3.98380, -2.97800, -1.22520],
        [-4.32780, -3.60390, -0.39540],
        [-4.37910, -3.39860, -2.15700],
        [-4.40030, -1.97730, -1.08900],
        [-1.82310, -2.07160, -2.38400],
        [-0.62610, -1.58010, -1.74930],
        [-1.42710, -2.83340, -3.64760],
        [-2.29980, -3.31060, -4.10840],
        [-0.98990, -2.14100, -4.37430],
        [-0.68230, -3.59920, -3.42260],
        [-2.67930, -0.84990, -2.74650],
        [-2.96470, -0.29790, -1.84590],
        [-2.09000, -0.17970, -3.37980],
        [-3.58800, -1.13290, -3.28830],
        [0.19230, -1.23660, 6.25750],
        [-3.53970, -1.94050, 4.23240],
        [-2.13900, 4.45860, 2.15480],
        [4.60400, 3.08720, 3.38130],
    ]
    coords = [[float(j) / Bohr for j in i] for i in coords]

    symbols = [
        "N",
        "C",
        "C",
        "C",
        "C",
        "C",
        "H",
        "H",
        "H",
        "C",
        "N",
        "C",
        "C",
        "C",
        "C",
        "H",
        "H",
        "H",
        "Ir",
        "C",
        "C",
        "C",
        "C",
        "C",
        "C",
        "H",
        "H",
        "H",
        "H",
        "B",
        "O",
        "C",
        "C",
        "H",
        "H",
        "H",
        "C",
        "H",
        "H",
        "H",
        "C",
        "O",
        "C",
        "H",
        "H",
        "H",
        "C",
        "H",
        "H",
        "H",
        "B",
        "O",
        "C",
        "C",
        "H",
        "H",
        "H",
        "C",
        "H",
        "H",
        "H",
        "C",
        "O",
        "C",
        "H",
        "H",
        "H",
        "C",
        "H",
        "H",
        "H",
        "B",
        "O",
        "C",
        "C",
        "H",
        "H",
        "H",
        "C",
        "H",
        "H",
        "H",
        "C",
        "O",
        "C",
        "H",
        "H",
        "H",
        "C",
        "H",
        "H",
        "H",
        "H",
        "H",
        "H",
        "H",
    ]

    atoms = []
    for i, _ in enumerate(coords):
        atoms.append(Atom(symbols[i], position=coords[i]))
    return Molecule(symbols=atoms)


def ts23() -> Molecule:
    """Create template with d(B(51)-Ir(19)-C(24)-H(27)) = 360 degrees.
    Values in parentheses are indices in xmol file."""

    coords = [
        [-0.13260, 1.16680, 1.46220],
        [0.75860, 2.02590, 2.00930],
        [0.36460, 3.31660, 2.38720],
        [-0.95380, 3.71820, 2.19310],
        [-1.86160, 2.81600, 1.63610],
        [-1.40780, 1.54800, 1.29010],
        [-2.06880, 0.79510, 0.87520],
        [-2.90310, 3.08100, 1.47830],
        [1.07280, 3.99830, 2.84480],
        [2.13850, 1.51540, 2.19720],
        [2.31950, 0.18940, 1.97880],
        [3.54740, -0.34210, 2.11290],
        [4.65050, 0.41850, 2.49280],
        [4.47640, 1.78510, 2.72240],
        [3.20950, 2.34170, 2.56600],
        [3.06400, 3.40540, 2.71800],
        [5.62390, -0.05260, 2.59610],
        [3.62070, -1.39810, 1.87560],
        [0.55350, -0.86440, 0.98590],
        [-0.25430, -1.22740, 5.38250],
        [-1.63080, -1.44180, 5.49280],
        [-2.38170, -1.64260, 4.33160],
        [-1.76940, -1.62180, 3.07400],
        [-0.39180, -1.37290, 2.94060],
        [0.35260, -1.20310, 4.12340],
        [1.42530, -1.04140, 4.05840],
        [0.46850, -2.23550, 1.82780],
        [-2.36120, -1.79270, 2.18220],
        [-2.10880, -1.46470, 6.47010],
        [1.39130, -0.02520, -0.76300],
        [1.21570, 1.32540, -1.07490],
        [2.17950, 1.68610, -2.09220],
        [1.56480, 2.74840, -2.99820],
        [0.60500, 2.41640, -3.39940],
        [2.23390, 2.98350, -3.83420],
        [1.39490, 3.66690, -2.42700],
        [3.40570, 2.25030, -1.35910],
        [4.16750, 2.61490, -2.05620],
        [3.08450, 3.08210, -0.72480],
        [3.85320, 1.48840, -0.71400],
        [2.45970, 0.30560, -2.77670],
        [2.26490, -0.61090, -1.67440],
        [1.42210, -0.05390, -3.84860],
        [0.41230, 0.04050, -3.44410],
        [1.52610, 0.57350, -4.73990],
        [1.56200, -1.10010, -4.13580],
        [3.87440, 0.12440, -3.31970],
        [4.62040, 0.21820, -2.52790],
        [3.97370, -0.87290, -3.76050],
        [4.09070, 0.86530, -4.09790],
        [1.45980, -2.56170, 0.20970],
        [0.82460, -3.60520, -0.45830],
        [1.83930, -4.43680, -1.06620],
        [1.33320, -5.87640, -1.11130],
        [1.00880, -6.21930, -0.12660],
        [0.47690, -5.94220, -1.79040],
        [2.11420, -6.55100, -1.48050],
        [2.06030, -3.90190, -2.48780],
        [2.77890, -4.51490, -3.04230],
        [1.10170, -3.91590, -3.01540],
        [2.40400, -2.86610, -2.45350],
        [3.06510, -4.18990, -0.11660],
        [2.81760, -2.84280, 0.35460],
        [4.42800, -4.22210, -0.80210],
        [4.49610, -3.44990, -1.57050],
        [5.21790, -4.04140, -0.06560],
        [4.60740, -5.20010, -1.26330],
        [3.05970, -5.10420, 1.11530],
        [2.08180, -5.08470, 1.60570],
        [3.30140, -6.13950, 0.85360],
        [3.80700, -4.74340, 1.82870],
        [-0.96050, -1.40580, -0.27860],
        [-2.26160, -1.79390, 0.07170],
        [-2.91060, -2.34080, -1.10250],
        [-2.63320, -3.85100, -1.09970],
        [-1.55710, -4.04010, -1.13760],
        [-3.01910, -4.27630, -0.16780],
        [-3.12460, -4.35280, -1.94030],
        [-4.40970, -2.07230, -1.00980],
        [-4.83460, -2.63310, -0.17100],
        [-4.91730, -2.39340, -1.92660],
        [-4.61770, -1.01210, -0.84850],
        [-2.16480, -1.58710, -2.25650],
        [-0.86670, -1.35790, -1.67500],
        [-1.98950, -2.38900, -3.54470],
        [-2.96100, -2.66920, -3.96820],
        [-1.45310, -1.78600, -4.28440],
        [-1.40770, -3.29490, -3.36410],
        [-2.77450, -0.21200, -2.56550],
        [-2.89640, 0.37050, -1.64750],
        [-2.09510, 0.33720, -3.22430],
        [-3.74760, -0.29720, -3.06080],
        [0.34940, -1.08370, 6.27760],
        [-3.45330, -1.82420, 4.40360],
        [-1.26950, 4.71690, 2.48410],
        [5.31660, 2.41230, 3.00940],
    ]
    coords = [[float(j) / Bohr for j in i] for i in coords]

    symbols = [
        "N",
        "C",
        "C",
        "C",
        "C",
        "C",
        "H",
        "H",
        "H",
        "C",
        "N",
        "C",
        "C",
        "C",
        "C",
        "H",
        "H",
        "H",
        "Ir",
        "C",
        "C",
        "C",
        "C",
        "C",
        "C",
        "H",
        "H",
        "H",
        "H",
        "B",
        "O",
        "C",
        "C",
        "H",
        "H",
        "H",
        "C",
        "H",
        "H",
        "H",
        "C",
        "O",
        "C",
        "H",
        "H",
        "H",
        "C",
        "H",
        "H",
        "H",
        "B",
        "O",
        "C",
        "C",
        "H",
        "H",
        "H",
        "C",
        "H",
        "H",
        "H",
        "C",
        "O",
        "C",
        "H",
        "H",
        "H",
        "C",
        "H",
        "H",
        "H",
        "B",
        "O",
        "C",
        "C",
        "H",
        "H",
        "H",
        "C",
        "H",
        "H",
        "H",
        "C",
        "O",
        "C",
        "H",
        "H",
        "H",
        "C",
        "H",
        "H",
        "H",
        "H",
        "H",
        "H",
        "H",
    ]

    atoms = []
    for i, _ in enumerate(coords):
        atoms.append(Atom(symbols[i], position=coords[i]))
    return Molecule(symbols=atoms)


def ts24() -> Molecule:
    """Create template with d(B(51)-Ir(19)-C(24)-H(27)) = 10 degrees.
    Values in parentheses are indices in xmol file."""

    coords = [
        [0.23070, 1.22760, 1.54730],
        [1.28660, 1.93310, 2.01860],
        [1.13190, 3.26650, 2.42080],
        [-0.11720, 3.87200, 2.32960],
        [-1.19700, 3.12740, 1.85060],
        [-0.97870, 1.80680, 1.47490],
        [-1.78030, 1.17060, 1.11570],
        [-2.19290, 3.55420, 1.77560],
        [1.97370, 3.82340, 2.81730],
        [2.57760, 1.21050, 2.10620],
        [2.52680, -0.12550, 1.87590],
        [3.65730, -0.84910, 1.93300],
        [4.89170, -0.28290, 2.23990],
        [4.95750, 1.09190, 2.47680],
        [3.79050, 1.84780, 2.40120],
        [3.83040, 2.91930, 2.55980],
        [5.77920, -0.90790, 2.28130],
        [3.54460, -1.90030, 1.68990],
        [0.56500, -0.86630, 0.99780],
        [-0.35040, -0.91410, 5.38250],
        [-1.63230, -1.45580, 5.51000],
        [-2.27430, -1.95400, 4.37330],
        [-1.64760, -1.90180, 3.12460],
        [-0.37120, -1.33190, 2.96750],
        [0.27170, -0.86780, 4.13120],
        [1.27300, -0.45090, 4.05950],
        [0.46530, -2.22390, 1.85970],
        [-2.16150, -2.28050, 2.24980],
        [-2.11820, -1.49940, 6.48280],
        [1.39470, -0.11870, -0.80060],
        [1.42730, 1.25100, -1.07250],
        [2.35440, 1.47720, -2.16120],
        [1.85990, 2.65720, -2.99180],
        [0.82840, 2.50500, -3.31600],
        [2.48970, 2.80270, -3.87710],
        [1.89610, 3.57250, -2.39200],
        [3.71420, 1.80010, -1.52430],
        [4.46860, 2.05250, -2.27690],
        [3.59360, 2.65300, -0.84960],
        [4.07460, 0.95250, -0.93380],
        [2.33750, 0.09230, -2.89220],
        [2.07810, -0.81330, -1.79410],
        [1.17080, -0.04930, -3.87910],
        [0.22790, 0.20170, -3.38890],
        [1.30950, 0.58210, -4.76290],
        [1.10450, -1.09320, -4.19890],
        [3.65150, -0.30880, -3.55700],
        [4.46310, -0.37130, -2.82910],
        [3.54120, -1.29260, -4.02480],
        [3.92990, 0.41070, -4.33550],
        [1.12220, -2.66800, 0.11620],
        [0.26690, -3.58520, -0.48910],
        [1.07240, -4.53030, -1.23070],
        [0.36030, -5.88050, -1.24410],
        [0.10740, -6.21270, -0.23510],
        [-0.56990, -5.79750, -1.81550],
        [0.98590, -6.64440, -1.72000],
        [1.20300, -3.98200, -2.65850],
        [1.75740, -4.67060, -3.30510],
        [0.19860, -3.84180, -3.06910],
        [1.69430, -3.00720, -2.64630],
        [2.42380, -4.49650, -0.43080],
        [2.42880, -3.15100, 0.10600],
        [3.67760, -4.68470, -1.28010],
        [3.76530, -3.89140, -2.02490],
        [4.56660, -4.65330, -0.64170],
        [3.65790, -5.65370, -1.79210],
        [2.43380, -5.45760, 0.76440],
        [1.53460, -5.32470, 1.37350],
        [2.49020, -6.50310, 0.44420],
        [3.30540, -5.23840, 1.38870],
        [-1.10410, -1.12580, -0.15750],
        [-2.42760, -1.26030, 0.28740],
        [-3.24630, -1.66660, -0.83730],
        [-3.25090, -3.20260, -0.85300],
        [-2.23300, -3.58520, -0.96740],
        [-3.64400, -3.56320, 0.10310],
        [-3.88280, -3.59570, -1.65680],
        [-4.66080, -1.13030, -0.63910],
        [-5.12120, -1.61360, 0.22880],
        [-5.28110, -1.34300, -1.51750],
        [-4.65960, -0.05190, -0.46520],
        [-2.45710, -1.05080, -2.04230],
        [-1.10090, -1.08370, -1.55750],
        [-2.53220, -1.84790, -3.34300],
        [-3.56700, -1.92510, -3.69660],
        [-1.94130, -1.34670, -4.11640],
        [-2.12850, -2.85340, -3.21000],
        [-2.81370, 0.42010, -2.30060],
        [-2.75550, 0.99850, -1.37380],
        [-2.09230, 0.84240, -3.00640],
        [-3.81840, 0.52910, -2.72240],
        [0.16890, -0.53170, 6.26020],
        [-3.26840, -2.39120, 4.45740],
        [-0.24790, 4.90560, 2.63980],
        [5.90470, 1.57240, 2.70850],
    ]
    coords = [[float(j) / Bohr for j in i] for i in coords]

    symbols = [
        "N",
        "C",
        "C",
        "C",
        "C",
        "C",
        "H",
        "H",
        "H",
        "C",
        "N",
        "C",
        "C",
        "C",
        "C",
        "H",
        "H",
        "H",
        "Ir",
        "C",
        "C",
        "C",
        "C",
        "C",
        "C",
        "H",
        "H",
        "H",
        "H",
        "B",
        "O",
        "C",
        "C",
        "H",
        "H",
        "H",
        "C",
        "H",
        "H",
        "H",
        "C",
        "O",
        "C",
        "H",
        "H",
        "H",
        "C",
        "H",
        "H",
        "H",
        "B",
        "O",
        "C",
        "C",
        "H",
        "H",
        "H",
        "C",
        "H",
        "H",
        "H",
        "C",
        "O",
        "C",
        "H",
        "H",
        "H",
        "C",
        "H",
        "H",
        "H",
        "B",
        "O",
        "C",
        "C",
        "H",
        "H",
        "H",
        "C",
        "H",
        "H",
        "H",
        "C",
        "O",
        "C",
        "H",
        "H",
        "H",
        "C",
        "H",
        "H",
        "H",
        "H",
        "H",
        "H",
        "H",
    ]

    atoms = []
    for i, _ in enumerate(coords):
        atoms.append(Atom(symbols[i], position=coords[i]))
    return Molecule(symbols=atoms)


def ts25() -> Molecule:
    """Create template with d(B(51)-Ir(19)-C(24)-H(27)) = 20 degrees.
    Values in parentheses are indices in xmol file."""

    coords = [
        [0.64000, 1.22790, 1.60480],
        [1.82480, 1.73040, 2.03010],
        [1.93060, 3.07150, 2.42330],
        [0.80790, 3.89140, 2.38100],
        [-0.40900, 3.35230, 1.95810],
        [-0.44760, 2.01530, 1.58080],
        [-1.36430, 1.53400, 1.25800],
        [-1.31440, 3.95130, 1.92380],
        [2.87690, 3.47170, 2.76980],
        [2.96360, 0.78340, 2.07230],
        [2.67210, -0.50840, 1.77720],
        [3.65330, -1.42680, 1.78150],
        [4.97050, -1.10970, 2.09970],
        [5.28430, 0.21560, 2.41030],
        [4.27280, 1.17120, 2.39050],
        [4.50550, 2.20690, 2.61250],
        [5.73090, -1.88550, 2.09450],
        [3.35190, -2.42570, 1.48470],
        [0.59730, -0.86920, 0.98490],
        [-0.45930, -0.77820, 5.33940],
        [-1.69620, -1.41840, 5.45460],
        [-2.26160, -2.01590, 4.32430],
        [-1.60400, -1.95950, 3.09310],
        [-0.37300, -1.29390, 2.94730],
        [0.19700, -0.73420, 4.10510],
        [1.16270, -0.23730, 4.04290],
        [0.45650, -2.21550, 1.85870],
        [-2.05410, -2.42120, 2.22200],
        [-2.20650, -1.46120, 6.41470],
        [1.37820, -0.18620, -0.86350],
        [1.54140, 1.17400, -1.13200],
        [2.38950, 1.31020, -2.29760],
        [1.95740, 2.54590, -3.08100],
        [0.89030, 2.51180, -3.31030],
        [2.51700, 2.62810, -4.01990],
        [2.14930, 3.44620, -2.48810],
        [3.82610, 1.47780, -1.78010],
        [4.53630, 1.65510, -2.59460],
        [3.85570, 2.33210, -1.09680],
        [4.14120, 0.58940, -1.22440],
        [2.16000, -0.05620, -3.02830],
        [1.88820, -0.94100, -1.91540],
        [0.91160, -0.05650, -3.92060],
        [0.04220, 0.28140, -3.35380],
        [1.04730, 0.57360, -4.80570],
        [0.71030, -1.08080, -4.24680],
        [3.36420, -0.59240, -3.79790],
        [4.22120, -0.74900, -3.13980],
        [3.10920, -1.55420, -4.25440],
        [3.65470, 0.09900, -4.59730],
        [0.78480, -2.70810, 0.03020],
        [-0.25250, -3.48410, -0.48220],
        [0.33050, -4.50330, -1.32900],
        [-0.56010, -5.74220, -1.29630],
        [-0.74880, -6.07580, -0.27360],
        [-1.52440, -5.51180, -1.76060],
        [-0.10060, -6.56520, -1.85560],
        [0.38860, -3.92250, -2.74860],
        [0.76530, -4.65630, -3.46910],
        [-0.62120, -3.62180, -3.04210],
        [1.01780, -3.03030, -2.76610],
        [1.75000, -4.68350, -0.68240],
        [2.00120, -3.36870, -0.12930],
        [2.86690, -5.01840, -1.66760],
        [2.98830, -4.22120, -2.40320],
        [3.81380, -5.13340, -1.12990],
        [2.65460, -5.95750, -2.19130],
        [1.75170, -5.67350, 0.48940],
        [0.94930, -5.43700, 1.19470],
        [1.62790, -6.70660, 0.14860],
        [2.70640, -5.59570, 1.01890],
        [-1.18400, -0.82730, -0.02980],
        [-2.45490, -0.68730, 0.54390],
        [-3.44260, -0.95370, -0.48260],
        [-3.73420, -2.46160, -0.43640],
        [-2.82280, -3.03130, -0.64050],
        [-4.08290, -2.72160, 0.56840],
        [-4.50980, -2.74590, -1.15570],
        [-4.70530, -0.15480, -0.17610],
        [-5.15880, -0.52120, 0.75050],
        [-5.43900, -0.26560, -0.98280],
        [-4.48490, 0.90740, -0.04800],
        [-2.67570, -0.52730, -1.77970],
        [-1.30910, -0.81840, -1.42460],
        [-3.03450, -1.31700, -3.03680],
        [-4.09420, -1.19280, -3.28850],
        [-2.43660, -0.95740, -3.88040],
        [-2.82510, -2.38030, -2.90560],
        [-2.76640, 0.98050, -2.05560],
        [-2.49960, 1.55190, -1.16170],
        [-2.05710, 1.24250, -2.84590],
        [-3.77020, 1.27680, -2.37780],
        [-0.00190, -0.31630, 6.21310],
        [-3.21740, -2.53170, 4.40160],
        [0.88050, 4.93290, 2.68370],
        [6.30300, 0.50370, 2.65710],
    ]
    coords = [[float(j) / Bohr for j in i] for i in coords]

    symbols = [
        "N",
        "C",
        "C",
        "C",
        "C",
        "C",
        "H",
        "H",
        "H",
        "C",
        "N",
        "C",
        "C",
        "C",
        "C",
        "H",
        "H",
        "H",
        "Ir",
        "C",
        "C",
        "C",
        "C",
        "C",
        "C",
        "H",
        "H",
        "H",
        "H",
        "B",
        "O",
        "C",
        "C",
        "H",
        "H",
        "H",
        "C",
        "H",
        "H",
        "H",
        "C",
        "O",
        "C",
        "H",
        "H",
        "H",
        "C",
        "H",
        "H",
        "H",
        "B",
        "O",
        "C",
        "C",
        "H",
        "H",
        "H",
        "C",
        "H",
        "H",
        "H",
        "C",
        "O",
        "C",
        "H",
        "H",
        "H",
        "C",
        "H",
        "H",
        "H",
        "B",
        "O",
        "C",
        "C",
        "H",
        "H",
        "H",
        "C",
        "H",
        "H",
        "H",
        "C",
        "O",
        "C",
        "H",
        "H",
        "H",
        "C",
        "H",
        "H",
        "H",
        "H",
        "H",
        "H",
        "H",
    ]

    atoms = []
    for i, _ in enumerate(coords):
        atoms.append(Atom(symbols[i], position=coords[i]))
    return Molecule(symbols=atoms)


def ts26() -> Molecule:
    """Create template with d(B(51)-Ir(19)-C(24)-H(27)) = 30 degrees.
    Values in parentheses are indices in xmol file."""

    coords = [
        [0.98370, 1.15480, 1.65860],
        [2.26350, 1.48410, 1.96090],
        [2.58930, 2.78680, 2.36300],
        [1.58840, 3.74790, 2.45580],
        [0.27200, 3.38680, 2.15870],
        [0.01450, 2.07870, 1.76700],
        [-0.98730, 1.73150, 1.53770],
        [-0.54340, 4.10040, 2.23380],
        [3.61210, 3.04790, 2.61160],
        [3.25970, 0.39330, 1.86410],
        [2.76370, -0.84070, 1.59360],
        [3.60600, -1.88210, 1.47230],
        [4.98170, -1.75060, 1.63300],
        [5.50630, -0.48670, 1.91540],
        [4.63770, 0.59440, 2.02750],
        [5.03260, 1.58430, 2.22820],
        [5.62570, -2.61940, 1.53010],
        [3.14030, -2.82420, 1.20360],
        [0.60350, -0.89650, 0.99530],
        [-0.43490, -0.64910, 5.35120],
        [-1.70140, -1.22670, 5.47990],
        [-2.28730, -1.83440, 4.36400],
        [-1.62450, -1.84430, 3.13480],
        [-0.36680, -1.23500, 2.97440],
        [0.22700, -0.67200, 4.11830],
        [1.21680, -0.22560, 4.04400],
        [0.43830, -2.20970, 1.91400],
        [-2.08860, -2.31450, 2.27470],
        [-2.21690, -1.21750, 6.43790],
        [1.34960, -0.28130, -0.89370],
        [1.74050, 1.03670, -1.13610],
        [2.51150, 1.06550, -2.36180],
        [2.25830, 2.39120, -3.07240],
        [1.18960, 2.56100, -3.21890],
        [2.75530, 2.41100, -4.04920],
        [2.65450, 3.21470, -2.46970],
        [3.98860, 0.94670, -1.95760],
        [4.65580, 1.02660, -2.82240],
        [4.22720, 1.75130, -1.25550],
        [4.17580, -0.00690, -1.45480],
        [1.98010, -0.20380, -3.10950],
        [1.63220, -1.07050, -2.00420],
        [0.69190, 0.06180, -3.90010],
        [-0.05380, 0.53600, -3.25950],
        [0.87880, 0.68730, -4.77920],
        [0.27680, -0.89420, -4.23160],
        [3.00520, -0.91720, -3.98720],
        [3.86260, -1.25770, -3.40330],
        [2.54330, -1.79420, -4.45210],
        [3.36190, -0.25580, -4.78520],
        [0.41800, -2.70870, -0.00370],
        [-0.76550, -3.30790, -0.43270],
        [-0.41900, -4.36170, -1.36350],
        [-1.47240, -5.46220, -1.27750],
        [-1.60550, -5.81320, -0.25190],
        [-2.43410, -5.07680, -1.63130],
        [-1.19370, -6.31470, -1.90750],
        [-0.41490, -3.73380, -2.76440],
        [-0.21730, -4.48140, -3.54000],
        [-1.39490, -3.28410, -2.94770],
        [0.33040, -2.93780, -2.81940],
        [1.01520, -4.76940, -0.86870],
        [1.50330, -3.53350, -0.29530],
        [1.97670, -5.20550, -1.97180],
        [2.14680, -4.39370, -2.68120],
        [2.94160, -5.48290, -1.53450],
        [1.58280, -6.07490, -2.51080],
        [0.98590, -5.80790, 0.25960],
        [0.29490, -5.49850, 1.04950],
        [0.68520, -6.79570, -0.10480],
        [1.98740, -5.88910, 0.69350],
        [-1.22230, -0.56490, 0.11160],
        [-2.41730, -0.27450, 0.77870],
        [-3.49560, -0.32950, -0.18680],
        [-4.01220, -1.77640, -0.19100],
        [-3.21410, -2.46380, -0.48620],
        [-4.32920, -2.03820, 0.82360],
        [-4.86740, -1.89920, -0.86430],
        [-4.59810, 0.63140, 0.24670],
        [-5.04230, 0.28400, 1.18500],
        [-5.38980, 0.67970, -0.50980],
        [-4.20870, 1.63900, 0.41010],
        [-2.75470, 0.05100, -1.51310],
        [-1.43000, -0.46390, -1.27000],
        [-3.30970, -0.59830, -2.77870],
        [-4.34900, -0.29470, -2.95010],
        [-2.71370, -0.28800, -3.64310],
        [-3.26670, -1.68720, -2.71420],
        [-2.62570, 1.56860, -1.70870],
        [-2.21900, 2.03930, -0.80890],
        [-1.93350, 1.76490, -2.53260],
        [-3.58860, 2.03270, -1.94590],
        [0.04280, -0.18450, 6.21270],
        [-3.26550, -2.30450, 4.45200],
        [1.83170, 4.76090, 2.76600],
        [6.57690, -0.34350, 2.03750],
    ]
    coords = [[float(j) / Bohr for j in i] for i in coords]

    symbols = [
        "N",
        "C",
        "C",
        "C",
        "C",
        "C",
        "H",
        "H",
        "H",
        "C",
        "N",
        "C",
        "C",
        "C",
        "C",
        "H",
        "H",
        "H",
        "Ir",
        "C",
        "C",
        "C",
        "C",
        "C",
        "C",
        "H",
        "H",
        "H",
        "H",
        "B",
        "O",
        "C",
        "C",
        "H",
        "H",
        "H",
        "C",
        "H",
        "H",
        "H",
        "C",
        "O",
        "C",
        "H",
        "H",
        "H",
        "C",
        "H",
        "H",
        "H",
        "B",
        "O",
        "C",
        "C",
        "H",
        "H",
        "H",
        "C",
        "H",
        "H",
        "H",
        "C",
        "O",
        "C",
        "H",
        "H",
        "H",
        "C",
        "H",
        "H",
        "H",
        "B",
        "O",
        "C",
        "C",
        "H",
        "H",
        "H",
        "C",
        "H",
        "H",
        "H",
        "C",
        "O",
        "C",
        "H",
        "H",
        "H",
        "C",
        "H",
        "H",
        "H",
        "H",
        "H",
        "H",
        "H",
    ]

    atoms = []
    for i, _ in enumerate(coords):
        atoms.append(Atom(symbols[i], position=coords[i]))
    return Molecule(symbols=atoms)


def ts27() -> Molecule:
    """Create template with d(B(51)-Ir(19)-C(24)-H(27)) = 40 degrees.
    Values in parentheses are indices in xmol file."""

    coords = [
        [1.37900, 1.00220, 1.70570],
        [2.71460, 1.11800, 1.90990],
        [3.27170, 2.33780, 2.31960],
        [2.44410, 3.43670, 2.52250],
        [1.06820, 3.29570, 2.32530],
        [0.57810, 2.06010, 1.91910],
        [-0.48040, 1.88170, 1.76120],
        [0.38430, 4.12420, 2.48620],
        [4.33930, 2.42950, 2.48640],
        [3.51560, -0.10660, 1.69060],
        [2.81520, -1.22640, 1.37600],
        [3.47280, -2.37550, 1.13500],
        [4.85730, -2.47240, 1.21810],
        [5.59180, -1.33030, 1.54930],
        [4.91470, -0.13740, 1.78130],
        [5.47270, 0.76070, 2.02290],
        [5.34570, -3.42230, 1.02000],
        [2.84790, -3.21180, 0.83960],
        [0.63880, -0.93440, 0.97460],
        [-0.48440, -0.61810, 5.31530],
        [-1.77030, -1.15700, 5.40120],
        [-2.33570, -1.75890, 4.27200],
        [-1.63050, -1.79860, 3.06950],
        [-0.35150, -1.22380, 2.95160],
        [0.22320, -0.67110, 4.10860],
        [1.22770, -0.25640, 4.06820],
        [0.44210, -2.23000, 1.91220],
        [-2.07370, -2.26450, 2.19450],
        [-2.31910, -1.12270, 6.34010],
        [1.28900, -0.32310, -0.95000],
        [1.69530, 0.98400, -1.21340],
        [2.37840, 1.00050, -2.48960],
        [2.09550, 2.33100, -3.18080],
        [1.02160, 2.51690, -3.24950],
        [2.52140, 2.34500, -4.19060],
        [2.54560, 3.14790, -2.60750],
        [3.87770, 0.86230, -2.18620],
        [4.48660, 0.92750, -3.09400],
        [4.17400, 1.66750, -1.50700],
        [4.08460, -0.09110, -1.69060],
        [1.77860, -0.26180, -3.20080],
        [1.47200, -1.12010, -2.07450],
        [0.45540, 0.02680, -3.92230],
        [-0.25220, 0.49860, -3.23850],
        [0.60510, 0.66170, -4.80150],
        [0.01470, -0.92000, -4.24720],
        [2.73910, -0.99960, -4.13000],
        [3.62300, -1.35130, -3.59410],
        [2.23610, -1.87160, -4.56010],
        [3.06050, -0.35020, -4.95250],
        [0.07470, -2.65110, -0.03490],
        [-1.22760, -3.02760, -0.36580],
        [-1.14590, -4.12040, -1.31140],
        [-2.38040, -5.00320, -1.15650],
        [-2.51740, -5.32350, -0.12150],
        [-3.27160, -4.44370, -1.45860],
        [-2.30390, -5.89240, -1.79280],
        [-1.10200, -3.49080, -2.71060],
        [-1.10290, -4.25310, -3.49690],
        [-1.98070, -2.85120, -2.83210],
        [-0.21650, -2.85890, -2.81150],
        [0.21240, -4.78900, -0.90450],
        [0.96770, -3.65520, -0.41430],
        [0.98450, -5.43300, -2.05250],
        [1.24520, -4.69290, -2.81130],
        [1.91280, -5.87380, -1.67400],
        [0.39320, -6.22870, -2.52040],
        [0.06440, -5.77210, 0.26410],
        [-0.49840, -5.31340, 1.08260],
        [-0.44420, -6.69260, -0.04060],
        [1.05970, -6.03330, 0.63690],
        [-1.17320, -0.27130, 0.24480],
        [-2.21860, 0.24170, 1.01810],
        [-3.37640, 0.39310, 0.16100],
        [-4.14900, -0.93290, 0.22740],
        [-3.52670, -1.75380, -0.14110],
        [-4.39890, -1.13870, 1.27260],
        [-5.07660, -0.89080, -0.35330],
        [-4.23360, 1.54170, 0.68190],
        [-4.64000, 1.28170, 1.66450],
        [-5.07280, 1.73750, 0.00450],
        [-3.65010, 2.45900, 0.78850],
        [-2.70820, 0.63230, -1.23350],
        [-1.49300, -0.13630, -1.11120],
        [-3.50030, 0.11520, -2.43200],
        [-4.47490, 0.61240, -2.50070],
        [-2.94670, 0.31660, -3.35480],
        [-3.65860, -0.96280, -2.36300],
        [-2.30190, 2.09650, -1.45410],
        [-1.72710, 2.46820, -0.60110],
        [-1.66410, 2.16050, -2.34040],
        [-3.17290, 2.74300, -1.60400],
        [-0.02600, -0.16080, 6.19100],
        [-3.32970, -2.19930, 4.33000],
        [2.86670, 4.38690, 2.83910],
        [6.67600, -1.36610, 1.61800],
    ]
    coords = [[float(j) / Bohr for j in i] for i in coords]

    symbols = [
        "N",
        "C",
        "C",
        "C",
        "C",
        "C",
        "H",
        "H",
        "H",
        "C",
        "N",
        "C",
        "C",
        "C",
        "C",
        "H",
        "H",
        "H",
        "Ir",
        "C",
        "C",
        "C",
        "C",
        "C",
        "C",
        "H",
        "H",
        "H",
        "H",
        "B",
        "O",
        "C",
        "C",
        "H",
        "H",
        "H",
        "C",
        "H",
        "H",
        "H",
        "C",
        "O",
        "C",
        "H",
        "H",
        "H",
        "C",
        "H",
        "H",
        "H",
        "B",
        "O",
        "C",
        "C",
        "H",
        "H",
        "H",
        "C",
        "H",
        "H",
        "H",
        "C",
        "O",
        "C",
        "H",
        "H",
        "H",
        "C",
        "H",
        "H",
        "H",
        "B",
        "O",
        "C",
        "C",
        "H",
        "H",
        "H",
        "C",
        "H",
        "H",
        "H",
        "C",
        "O",
        "C",
        "H",
        "H",
        "H",
        "C",
        "H",
        "H",
        "H",
        "H",
        "H",
        "H",
        "H",
    ]

    atoms = []
    for i, _ in enumerate(coords):
        atoms.append(Atom(symbols[i], position=coords[i]))
    return Molecule(symbols=atoms)